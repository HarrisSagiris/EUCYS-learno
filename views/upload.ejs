<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>LEARNO.ME - Upload Document</title>
    <link href="https://fonts.googleapis.com/css2?family=Poppins:wght@300;400;500;600;700&display=swap" rel="stylesheet">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
    <style>
        :root {
            --primary: #6C63FF;
            --secondary: #4CAF50;
            --dark-bg: #121212;
            --card-bg: #1E1E1E;
            --input-bg: #2A2A2A;
            --text-primary: #FFFFFF;
            --text-secondary: #B0B0B0;
            --accent: #FF5722;
            --success: #4CAF50;
            --warning: #FFC107;
            --error: #F44336;
        }
        
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }
        
        body {
            font-family: 'Poppins', sans-serif;
            background-color: var(--dark-bg);
            color: var(--text-primary);
            line-height: 1.6;
            min-height: 100vh;
            background-image: radial-gradient(circle at 10% 20%, rgba(108, 99, 255, 0.1) 0%, rgba(0, 0, 0, 0) 80%);
        }
        
        .container {
            max-width: 1200px;
            margin: 0 auto;
            padding: 0 20px;
        }
        
        /* Header Styles */
        header {
            background-color: rgba(30, 30, 30, 0.8);
            backdrop-filter: blur(10px);
            position: fixed;
            width: 100%;
            top: 0;
            z-index: 1000;
            box-shadow: 0 2px 10px rgba(0, 0, 0, 0.3);
        }
        
        .navbar {
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding: 15px 0;
        }
        
        .logo {
            font-size: 24px;
            font-weight: 700;
            color: var(--primary);
            text-decoration: none;
            display: flex;
            align-items: center;
        }
        
        .logo i {
            margin-right: 10px;
        }
        
        .nav-links {
            display: flex;
            list-style: none;
        }
        
        .nav-links li {
            margin-left: 30px;
        }
        
        .nav-links a {
            color: var(--text-primary);
            text-decoration: none;
            font-weight: 500;
            transition: color 0.3s;
        }
        
        .nav-links a:hover {
            color: var(--primary);
        }
        
        .btn {
            display: inline-block;
            padding: 10px 20px;
            background-color: var(--primary);
            color: white;
            border: none;
            border-radius: 5px;
            cursor: pointer;
            font-weight: 500;
            transition: all 0.3s ease;
            text-decoration: none;
        }
        
        .btn:hover {
            background-color: #5a52d5;
            transform: translateY(-2px);
            box-shadow: 0 5px 15px rgba(108, 99, 255, 0.3);
        }
        
        .btn-secondary {
            background-color: transparent;
            border: 2px solid var(--primary);
            color: var(--primary);
        }
        
        .btn-secondary:hover {
            background-color: var(--primary);
            color: white;
        }
        
        /* Main Content */
        main {
            padding-top: 100px;
            padding-bottom: 50px;
            min-height: calc(100vh - 80px);
        }
        
        .upload-section {
            background-color: var(--card-bg);
            border-radius: 10px;
            padding: 30px;
            margin-top: 20px;
            box-shadow: 0 5px 15px rgba(0, 0, 0, 0.2);
            max-width: 800px;
            margin: 0 auto;
        }
        
        .upload-section h2 {
            margin-bottom: 20px;
            color: var(--primary);
            font-size: 24px;
        }
        
        .upload-form {
            display: flex;
            flex-direction: column;
        }
        
        .form-group {
            margin-bottom: 20px;
        }
        
        .form-group label {
            display: block;
            margin-bottom: 8px;
            font-weight: 500;
        }
        
        .form-group input[type="text"],
        .form-group textarea {
            width: 100%;
            padding: 12px 15px;
            background-color: var(--input-bg);
            border: 1px solid #444;
            border-radius: 5px;
            color: var(--text-primary);
            font-family: 'Poppins', sans-serif;
            transition: border-color 0.3s;
        }
        
        .form-group input[type="text"]:focus,
        .form-group textarea:focus {
            border-color: var(--primary);
            outline: none;
        }
        
        .file-upload {
            position: relative;
            display: flex;
            flex-direction: column;
            align-items: center;
            padding: 30px;
            border: 2px dashed #444;
            border-radius: 10px;
            background-color: rgba(42, 42, 42, 0.5);
            transition: all 0.3s;
            cursor: pointer;
        }
        
        .file-upload:hover {
            border-color: var(--primary);
            background-color: rgba(108, 99, 255, 0.05);
        }
        
        .file-upload i {
            font-size: 48px;
            color: var(--primary);
            margin-bottom: 15px;
        }
        
        .file-upload p {
            margin-bottom: 10px;
            color: var(--text-secondary);
        }
        
        .file-upload input[type="file"] {
            position: absolute;
            width: 100%;
            height: 100%;
            top: 0;
            left: 0;
            opacity: 0;
            cursor: pointer;
        }
        
        .file-info {
            margin-top: 15px;
            display: none;
        }
        
        .file-info.active {
            display: block;
        }
        
        .file-name {
            font-weight: 500;
            color: var(--primary);
        }
        
        .supported-formats {
            margin-top: 10px;
            font-size: 14px;
            color: var(--text-secondary);
        }
        
        .error-message {
            color: var(--error);
            margin-top: 10px;
            font-weight: 500;
            padding: 10px;
            background-color: rgba(244, 67, 54, 0.1);
            border-radius: 5px;
            margin-bottom: 15px;
        }
        
        .success-message {
            color: var(--success);
            margin-top: 10px;
            font-weight: 500;
            padding: 10px;
            background-color: rgba(76, 175, 80, 0.1);
            border-radius: 5px;
            margin-bottom: 15px;
        }
        
        .processing-indicator {
            display: none;
            align-items: center;
            margin-top: 20px;
        }
        
        .processing-indicator.active {
            display: flex;
        }
        
        .spinner {
            border: 4px solid rgba(0, 0, 0, 0.1);
            border-radius: 50%;
            border-top: 4px solid var(--primary);
            width: 24px;
            height: 24px;
            animation: spin 1s linear infinite;
            margin-right: 10px;
        }
        
        @keyframes spin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }
        
        /* Token Info */
        .token-info {
            background-color: rgba(108, 99, 255, 0.1);
            border-radius: 8px;
            padding: 15px;
            margin-bottom: 20px;
            display: flex;
            justify-content: space-between;
            align-items: center;
        }
        
        .token-info-text {
            display: flex;
            flex-direction: column;
        }
        
        .token-cost {
            font-weight: 600;
            color: var(--primary);
            font-size: 18px;
        }
        
        .token-balance {
            color: var(--text-secondary);
            font-size: 14px;
            margin-top: 5px;
        }
        
        .token-warning {
            color: var(--warning);
            font-weight: 500;
            margin-top: 5px;
        }
        
        /* Camera styles */
        .upload-options {
            display: flex;
            gap: 15px;
            margin-bottom: 15px;
        }
        
        .upload-option {
            flex: 1;
            padding: 10px;
            background-color: var(--input-bg);
            border-radius: 5px;
            text-align: center;
            cursor: pointer;
            transition: all 0.3s;
            border: 2px solid transparent;
        }
        
        .upload-option:hover {
            border-color: var(--primary);
        }
        
        .upload-option.active {
            border-color: var(--primary);
            background-color: rgba(108, 99, 255, 0.1);
        }
        
        .upload-option i {
            font-size: 24px;
            color: var(--primary);
            margin-bottom: 5px;
        }
        
        .camera-container {
            display: none;
            flex-direction: column;
            align-items: center;
            margin-bottom: 20px;
        }
        
        .camera-container.active {
            display: flex;
        }
        
        #cameraPreview {
            width: 100%;
            max-width: 500px;
            height: auto;
            border-radius: 10px;
            margin-bottom: 15px;
            background-color: var(--input-bg);
        }
        
        .camera-controls {
            display: flex;
            gap: 10px;
            margin-top: 10px;
        }
        
        /* Footer */
        footer {
            background-color: var(--card-bg);
            padding: 20px 0;
            text-align: center;
        }
        
        .footer-content {
            display: flex;
            flex-direction: column;
            align-items: center;
        }
        
        .footer-logo {
            font-size: 20px;
            font-weight: 700;
            color: var(--primary);
            margin-bottom: 10px;
        }
        
        .footer-links {
            display: flex;
            list-style: none;
            margin-bottom: 15px;
        }
        
        .footer-links li {
            margin: 0 15px;
        }
        
        .footer-links a {
            color: var(--text-secondary);
            text-decoration: none;
            transition: color 0.3s;
        }
        
        .footer-links a:hover {
            color: var(--primary);
        }
        
        .social-icons {
            display: flex;
            margin-bottom: 15px;
        }
        
        .social-icons a {
            color: var(--text-secondary);
            margin: 0 10px;
            font-size: 18px;
            transition: color 0.3s;
        }
        
        .social-icons a:hover {
            color: var(--primary);
        }
        
        .copyright {
            color: var(--text-secondary);
            font-size: 14px;
        }
        
        /* Responsive */
        @media (max-width: 768px) {
            .navbar {
                flex-direction: column;
                padding: 15px 0;
            }
            
            .nav-links {
                margin-top: 15px;
            }
            
            .nav-links li {
                margin: 0 10px;
            }
            
            .upload-section {
                padding: 20px;
            }
            
            .token-info {
                flex-direction: column;
                align-items: flex-start;
            }
            
            .token-info a {
                margin-top: 15px;
                align-self: flex-start;
            }
            
            .upload-options {
                flex-direction: column;
            }
            
            .youtube-input {
                width: 100%;
            }
            
            .flashcard-count-container {
                flex-direction: column;
                gap: 10px;
            }
            
            .flashcard-count-info {
                width: 100%;
            }
            
            .flashcard-count-slider {
                width: 100%;
            }
        }
    </style>
</head>
<body>
    <header>
        <div class="container">
            <nav class="navbar">
                <a href="/dashboard" class="logo">
                    <i class="fas fa-brain"></i> LEARNO
                </a>
                <ul class="nav-links">
                    <li><a href="/dashboard">Dashboard</a></li>
                    <li><a href="/upload">Upload</a></li>
                    <li><a href="/logout">Logout</a></li>
                </ul>
            </nav>
        </div>
    </header>

    <main>
        <div class="container">
            <div class="upload-section">
                <h2>Upload Document for Flashcards</h2>
                <% if (typeof error !== 'undefined') { %>
                    <div class="error-message"><%= error %></div>
                <% } %>
                
                <div class="token-info">
                    <div class="token-info-text">
                        <div class="token-cost">Base Cost: <%= typeof tokenCost !== 'undefined' ? tokenCost : 10 %> tokens</div>
                        <div class="token-balance">Your balance: <%= typeof user !== 'undefined' ? user.tokens : 0 %> tokens</div>
                        <% if (typeof hasEnoughTokens !== 'undefined' && !hasEnoughTokens) { %>
                            <div class="token-warning">You don't have enough tokens for this operation.</div>
                        <% } %>
                    </div>
                    <a href="/tokenbuy" class="btn btn-secondary">Get More Tokens</a>
                </div>
                
                <div class="flashcard-count-container" style="margin: 20px 0; padding: 20px; background: var(--card-bg); border-radius: 8px;">
                    <div class="flashcard-count-info" style="display: flex; justify-content: space-between; align-items: center; margin-bottom: 15px;">
                        <div>
                            <h3 style="color: var(--text-primary); margin-bottom: 5px;">Number of Flashcards</h3>
                            <p style="color: var(--text-secondary); font-size: 14px;">Select how many flashcards you want to generate</p>
                        </div>
                        <div style="text-align: right;">
                            <span id="cardCount" style="font-size: 24px; color: var(--primary);">25</span>
                            <span style="color: var(--text-secondary)"> cards</span>
                        </div>
                    </div>
                    
                    <div class="flashcard-count-slider" style="margin-bottom: 15px;">
                        <input type="range" id="cardCountSlider" name="cardCount" min="10" max="100" value="25" step="5" 
                            style="width: 100%; background: var(--primary); height: 6px; border-radius: 3px; outline: none; -webkit-appearance: none;">
                    </div>
                    
                    <div class="flashcard-effectiveness" style="display: flex; gap: 20px; margin-bottom: 15px;">
                        <div style="flex: 1; padding: 15px; background: rgba(76, 175, 80, 0.1); border-radius: 6px;">
                            <h4 style="color: var(--success);">Recommended (25 cards)</h4>
                            <p style="color: var(--text-secondary); font-size: 14px;">Best for retention and manageable review sessions</p>
                        </div>
                        <div style="flex: 1; padding: 15px; background: rgba(255, 87, 34, 0.1); border-radius: 6px;">
                            <h4 style="color: var(--accent);">Extended (50+ cards)</h4>
                            <p style="color: var(--text-secondary); font-size: 14px;">Comprehensive coverage but may take longer to review</p>
                        </div>
                    </div>
                    
                    <div class="token-calculation" style="background: var(--input-bg); padding: 15px; border-radius: 6px;">
                        <div style="display: flex; justify-content: space-between; margin-bottom: 10px;">
                            <span>Base cost:</span>
                            <span id="baseCost">10 tokens</span>
                        </div>
                        <div style="display: flex; justify-content: space-between; margin-bottom: 10px;">
                            <span>Per card cost:</span>
                            <span id="perCardCost">1 token × <span id="cardCountCost">25</span></span>
                        </div>
                        <div style="display: flex; justify-content: space-between; padding-top: 10px; border-top: 1px solid var(--dark-bg);">
                            <strong>Total cost:</strong>
                            <strong id="totalCost" style="color: var(--primary)">60 tokens</strong>
                        </div>
                    </div>
                </div>

                <form class="upload-form" action="/upload" method="POST" enctype="multipart/form-data" onsubmit="return validateForm()">
                    <!-- Add hidden input for cardCount that will be updated by slider -->
                    <input type="hidden" name="cardCount" id="cardCountInput" value="25">
                    
                    <div class="form-group">
                        <label for="title">Deck Title</label>
                        <input type="text" id="title" name="title" placeholder="Enter a title for your flashcard deck" required>
                    </div>
                    
                    <div class="form-group">
                        <label for="description">Description (Optional)</label>
                        <textarea id="description" name="description" rows="3" placeholder="Enter a description for your flashcard deck"></textarea>
                    </div>
                    
                    <div class="form-group">
                        <label for="cardType">Card Type</label>
                        <select id="cardType" name="cardType" class="form-control" style="width: 100%; padding: 12px 15px; background-color: var(--input-bg); border: 1px solid #444; border-radius: 5px; color: var(--text-primary); font-family: 'Poppins', sans-serif; transition: border-color 0.3s;">
                            <option value="flashcard">Standard Flashcards</option>
                            <option value="multiple_choice">Multiple Choice</option>
                        </select>
                    </div>
                    
                    <div class="form-group">
                        <label>Document Source</label>
                        <div class="upload-options">
                            <div class="upload-option active" id="fileUploadOption">
                                <i class="fas fa-file-upload"></i>
                                <p>Upload File</p>
                            </div>
                            <div class="upload-option" id="cameraOption">
                                <i class="fas fa-camera"></i>
                                <p>Take Photo</p>
                            </div>
                            <div class="upload-option" id="youtubeOption">
                                <i class="fab fa-youtube"></i>
                                <p>YouTube Video</p>
                            </div>
                        </div>
                        
                        <div class="file-upload" id="fileUploadArea">
                            <i class="fas fa-cloud-upload-alt"></i>
                            <p>Drag & Drop your file here or click to browse</p>
                            <p class="supported-formats">Supported formats: PDF, DOC, DOCX, TXT, JPG, JPEG, PNG</p>
                            <input type="file" name="document" id="documentUpload" accept=".pdf,.doc,.docx,.txt,.jpg,.jpeg,.png">
                        </div>
                        
                        <div class="camera-container" id="cameraContainer">
                            <video id="cameraPreview" autoplay playsinline></video>
                            <div class="camera-controls">
                                <button type="button" class="btn" id="captureBtn">Capture Photo</button>
                                <button type="button" class="btn btn-secondary" id="switchCameraBtn">Switch Camera</button>
                            </div>
                            <canvas id="captureCanvas" style="display:none;"></canvas>
                        </div>
                        
                        <div class="youtube-container" id="youtubeContainer" style="display:none;">
                            <div class="form-group youtube-input">
                                <label for="youtubeUrl">YouTube Video URL</label>
                                <input type="url" id="youtubeUrl" name="youtubeUrl" placeholder="Enter YouTube video URL (e.g., https://www.youtube.com/watch?v=...)" class="form-control">
                                <button type="button" class="btn" id="validateYoutubeBtn" style="margin-top: 10px; background-color: #FF0000; display: flex; align-items: center; justify-content: center;">
                                    <i class="fab fa-youtube" style="margin-right: 8px;"></i> Validate YouTube Link
                                </button>
                            </div>
                            <div id="youtubePreview" style="margin-top: 15px; display: none;">
                                <h4>Video Preview:</h4>
                                <div id="youtubeEmbedContainer" style="position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden; max-width: 100%; border-radius: 8px; margin-top: 10px;">
                                    <iframe id="youtubeEmbed" style="position: absolute; top: 0; left: 0; width: 100%; height: 100%; border: none;" allowfullscreen></iframe>
                                </div>
                            </div>
                            <input type="hidden" id="youtubeVideoId" name="youtubeVideoId">
                            <input type="hidden" id="sourceType" name="sourceType" value="file">
                        </div>
                        
                        <div class="file-info" id="fileInfo">
                            <p>Selected file: <span class="file-name" id="fileName"></span></p>
                        </div>
                    </div>
                    
                    <button type="submit" class="btn" id="uploadBtn" <%= typeof hasEnoughTokens !== 'undefined' && !hasEnoughTokens ? 'disabled' : '' %>>
                        Generate Flashcards
                    </button>
                    
                    <div class="processing-indicator" id="processingIndicator">
                        <div class="spinner"></div>
                        <p>Processing your document... This may take a minute.</p>
                    </div>
                </form>
            </div>
        </div>
    </main>

    <footer>
        <div class="container">
            <div class="footer-content">
                <div class="footer-logo">
                    <i class="fas fa-brain"></i> LEARNO.ME
                </div>
                <ul class="footer-links">
                    <li><a href="/">Home</a></li>
                    <li><a href="/about">About</a></li>
                    <li><a href="/privacy">Privacy</a></li>
                    <li><a href="/terms">Terms</a></li>
                </ul>
                <div class="social-icons">
                    <a href="#"><i class="fab fa-twitter"></i></a>
                    <a href="#"><i class="fab fa-facebook"></i></a>
                    <a href="#"><i class="fab fa-instagram"></i></a>
                    <a href="#"><i class="fab fa-github"></i></a>
                </div>
                <p class="copyright">&copy; 2023 LEARNO.ME. All rights reserved.</p>
            </div>
        </div>
    </footer>

    <script>
        document.addEventListener('DOMContentLoaded', function() {
            const fileUpload = document.getElementById('documentUpload');
            const fileInfo = document.getElementById('fileInfo');
            const fileName = document.getElementById('fileName');
            const uploadForm = document.querySelector('.upload-form');
            const uploadBtn = document.getElementById('uploadBtn');
            const processingIndicator = document.getElementById('processingIndicator');
            const fileUploadArea = document.getElementById('fileUploadArea');
            const sourceType = document.getElementById('sourceType');
            
            // Flashcard count slider functionality
            const cardCountSlider = document.getElementById('cardCountSlider');
            const cardCount = document.getElementById('cardCount');
            const cardCountCost = document.getElementById('cardCountCost');
            const totalCost = document.getElementById('totalCost');
            const cardCountInput = document.getElementById('cardCountInput');
            
            cardCountSlider.addEventListener('input', function() {
                const count = this.value;
                cardCount.textContent = count;
                cardCountCost.textContent = count;
                const total = 10 + (count * 1); // Base cost + (cards × per card cost)
                totalCost.textContent = total + ' tokens';
                
                // Update hidden input for form submission
                cardCountInput.value = count;
            });
            
            // Camera elements
            const fileUploadOption = document.getElementById('fileUploadOption');
            const cameraOption = document.getElementById('cameraOption');
            const youtubeOption = document.getElementById('youtubeOption');
            const cameraContainer = document.getElementById('cameraContainer');
            const youtubeContainer = document.getElementById('youtubeContainer');
            const cameraPreview = document.getElementById('cameraPreview');
            const captureBtn = document.getElementById('captureBtn');
            const switchCameraBtn = document.getElementById('switchCameraBtn');
            const captureCanvas = document.getElementById('captureCanvas');
            
            // YouTube elements
            const youtubeUrl = document.getElementById('youtubeUrl');
            const validateYoutubeBtn = document.getElementById('validateYoutubeBtn');
            const youtubePreview = document.getElementById('youtubePreview');
            const youtubeEmbed = document.getElementById('youtubeEmbed');
            const youtubeVideoId = document.getElementById('youtubeVideoId');
            
            let stream = null;
            let facingMode = 'environment'; // Start with back camera
            
            // Check if running on mobile
            const isMobile = /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent);
            
            // Request camera permissions on page load for mobile devices
            if (isMobile) {
                // Request permissions early to improve user experience on mobile
                navigator.mediaDevices.getUserMedia({ video: true, audio: false })
                    .then(function(mediaStream) {
                        // Stop the stream immediately after getting permission
                        mediaStream.getTracks().forEach(track => track.stop());
                        console.log('Camera permission granted on mobile');
                    })
                    .catch(function(err) {
                        console.error('Error requesting camera permission:', err);
                    });
            }
            
            // Toggle between file upload, camera, and YouTube
            fileUploadOption.addEventListener('click', function() {
                fileUploadOption.classList.add('active');
                cameraOption.classList.remove('active');
                youtubeOption.classList.remove('active');
                fileUploadArea.style.display = 'flex';
                cameraContainer.classList.remove('active');
                youtubeContainer.style.display = 'none';
                sourceType.value = 'file';
                
                // Stop camera if it's running
                if (stream) {
                    stream.getTracks().forEach(track => track.stop());
                    stream = null;
                }
            });
            
            cameraOption.addEventListener('click', function() {
                cameraOption.classList.add('active');
                fileUploadOption.classList.remove('active');
                youtubeOption.classList.remove('active');
                fileUploadArea.style.display = 'none';
                cameraContainer.classList.add('active');
                youtubeContainer.style.display = 'none';
                sourceType.value = 'camera';
                
                // Start camera
                startCamera();
            });
            
            youtubeOption.addEventListener('click', function() {
                youtubeOption.classList.add('active');
                fileUploadOption.classList.remove('active');
                cameraOption.classList.remove('active');
                fileUploadArea.style.display = 'none';
                cameraContainer.classList.remove('active');
                youtubeContainer.style.display = 'block';
                sourceType.value = 'youtube';
                
                // Stop camera if it's running
                if (stream) {
                    stream.getTracks().forEach(track => track.stop());
                    stream = null;
                }
            });
            
            // YouTube link validation
            validateYoutubeBtn.addEventListener('click', function() {
                const url = youtubeUrl.value.trim();
                if (!url) {
                    alert('Please enter a YouTube URL');
                    return;
                }
                
                // Extract video ID from various YouTube URL formats
                let videoId = null;
                const regExp = /^.*(youtu.be\/|v\/|u\/\w\/|embed\/|watch\?v=|\&v=)([^#\&\?]*).*/;
                const match = url.match(regExp);
                
                if (match && match[2].length === 11) {
                    videoId = match[2];
                    youtubeEmbed.src = `https://www.youtube.com/embed/${videoId}`;
                    youtubePreview.style.display = 'block';
                    youtubeVideoId.value = videoId;
                    
                    // Update file info display
                    fileName.textContent = `YouTube: ${url}`;
                    fileInfo.classList.add('active');
                } else {
                    alert('Invalid YouTube URL. Please enter a valid YouTube video URL.');
                }
            });
            
            // Camera functionality
            async function startCamera() {
                try {
                    if (stream) {
                        stream.getTracks().forEach(track => track.stop());
                    }
                    
                    stream = await navigator.mediaDevices.getUserMedia({
                        video: { facingMode: facingMode },
                        audio: false
                    });
                    
                    cameraPreview.srcObject = stream;
                } catch (err) {
                    console.error('Error accessing camera:', err);
                    alert('Could not access the camera. Please make sure you have granted camera permissions.');
                }
            }
            
            // Switch between front and back camera
            switchCameraBtn.addEventListener('click', function() {
                facingMode = facingMode === 'user' ? 'environment' : 'user';
                startCamera();
            });
            
            // Capture photo
            captureBtn.addEventListener('click', function() {
                if (!stream) return;
                
                // Set canvas dimensions to match video
                captureCanvas.width = cameraPreview.videoWidth;
                captureCanvas.height = cameraPreview.videoHeight;
                
                // Draw current video frame to canvas
                const context = captureCanvas.getContext('2d');
                context.drawImage(cameraPreview, 0, 0, captureCanvas.width, captureCanvas.height);
                
                // Convert canvas to file
                captureCanvas.toBlob(function(blob) {
                    const capturedFile = new File([blob], "captured_photo.jpg", { type: "image/jpeg" });
                    
                    // Create a FileList-like object
                    const dataTransfer = new DataTransfer();
                    dataTransfer.items.add(capturedFile);
                    fileUpload.files = dataTransfer.files;
                    
                    // Update UI
                    fileName.textContent = "captured_photo.jpg";
                    fileInfo.classList.add('active');
                    
                    // Switch back to file upload view to show the captured image info
                    fileUploadOption.classList.add('active');
                    cameraOption.classList.remove('active');
                    youtubeOption.classList.remove('active');
                    fileUploadArea.style.display = 'flex';
                    cameraContainer.classList.remove('active');
                    youtubeContainer.style.display = 'none';
                    
                    // Stop camera
                    stream.getTracks().forEach(track => track.stop());
                    stream = null;
                }, 'image/jpeg', 0.9);
            });
            
            // File upload handling
            fileUpload.addEventListener('change', function() {
                if (this.files && this.files[0]) {
                    fileName.textContent = this.files[0].name;
                    fileInfo.classList.add('active');
                    fileUploadArea.style.borderColor = 'var(--primary)';
                } else {
                    fileInfo.classList.remove('active');
                    fileUploadArea.style.borderColor = '#444';
                }
            });
            
            // Form validation function
            window.validateForm = function() {
                const currentSourceType = sourceType.value;
                
                if (currentSourceType === 'youtube') {
                    if (!youtubeVideoId.value) {
                        alert('Please validate your YouTube URL first');
                        return false;
                    }
                } else if (currentSourceType === 'file' && (!fileUpload.files || fileUpload.files.length === 0)) {
                    alert('Please select a file to upload');
                    return false;
                }
                
                uploadBtn.disabled = true;
                uploadBtn.textContent = 'Processing...';
                processingIndicator.classList.add('active');
                return true;
            };
            
            // Drag and drop functionality
            ['dragenter', 'dragover', 'dragleave', 'drop'].forEach(eventName => {
                fileUploadArea.addEventListener(eventName, preventDefaults, false);
            });
            
            function preventDefaults(e) {
                e.preventDefault();
                e.stopPropagation();
            }
            
            ['dragenter', 'dragover'].forEach(eventName => {
                fileUploadArea.addEventListener(eventName, highlight, false);
            });
            
            ['dragleave', 'drop'].forEach(eventName => {
                fileUploadArea.addEventListener(eventName, unhighlight, false);
            });
            
            function highlight() {
                fileUploadArea.style.borderColor = 'var(--primary)';
                fileUploadArea.style.backgroundColor = 'rgba(108, 99, 255, 0.05)';
            }
            
            function unhighlight() {
                fileUploadArea.style.borderColor = '#444';
                fileUploadArea.style.backgroundColor = 'rgba(42, 42, 42, 0.5)';
            }
            
            fileUploadArea.addEventListener('drop', handleDrop, false);
            
            function handleDrop(e) {
                const dt = e.dataTransfer;
                const files = dt.files;
                fileUpload.files = files;
                
                if (files && files[0]) {
                    fileName.textContent = files[0].name;
                    fileInfo.classList.add('active');
                }
            }
        });
    </script>
</body>
</html>
