<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document Summarizer</title>
    <link href="https://fonts.googleapis.com/css2?family=Poppins:wght@300;400;500;600;700&display=swap" rel="stylesheet">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
    <style>
        :root {
            --primary: #10a37f;
            --primary-light: #1db894;
            --primary-dark: #0d8c6e;
            --secondary: #4CAF50;
            --dark-bg: #202123;
            --card-bg: #343541;
            --input-bg: #40414f;
            --text-primary: #FFFFFF;
            --text-secondary: #c5c5d2;
            --accent: #FF5722;
            --success: #4CAF50;
            --warning: #FFC107;
            --error: #F44336;
            --border-color: rgba(255, 255, 255, 0.2);
        }
        
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }
        
        body {
            font-family: 'Poppins', sans-serif;
            background-color: var(--dark-bg);
            color: var(--text-primary);
            line-height: 1.6;
            min-height: 100vh;
            padding: 80px 0;
        }
        
        .container {
            max-width: 1000px;
            margin: 0 auto;
            padding: 0 20px;
        }
        
        h1 {
            font-size: 2.5rem;
            margin-bottom: 10px;
            color: var(--text-primary);
            text-align: center;
        }
        
        .description {
            text-align: center;
            color: var(--text-secondary);
            margin-bottom: 30px;
            max-width: 700px;
            margin-left: auto;
            margin-right: auto;
        }
        
        .card {
            background-color: var(--card-bg);
            border-radius: 10px;
            box-shadow: 0 8px 16px rgba(0, 0, 0, 0.2);
            margin-bottom: 30px;
            overflow: hidden;
            transition: transform 0.3s ease, box-shadow 0.3s ease;
            border: 1px solid var(--border-color);
        }
        
        .card:hover {
            transform: translateY(-5px);
            box-shadow: 0 12px 20px rgba(0, 0, 0, 0.3);
        }
        
        .card-header {
            background-color: rgba(16, 163, 127, 0.1);
            padding: 20px;
            border-bottom: 1px solid var(--border-color);
        }
        
        .card-header h2 {
            margin: 0;
            font-size: 1.5rem;
            color: var(--text-primary);
        }
        
        .card-body {
            padding: 25px;
        }
        
        .form-group {
            margin-bottom: 20px;
        }
        
        label {
            display: block;
            margin-bottom: 8px;
            font-weight: 500;
            color: var(--text-secondary);
        }
        
        .form-control {
            width: 100%;
            padding: 12px 15px;
            background-color: var(--input-bg);
            border: 1px solid var(--border-color);
            border-radius: 6px;
            color: var(--text-primary);
            font-family: 'Poppins', sans-serif;
            transition: border-color 0.3s ease, box-shadow 0.3s ease;
        }
        
        .form-control:focus {
            outline: none;
            border-color: var(--primary);
            box-shadow: 0 0 0 3px rgba(16, 163, 127, 0.2);
        }
        
        select.form-control {
            appearance: none;
            background-image: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' width='16' height='16' fill='%23ffffff' viewBox='0 0 16 16'%3E%3Cpath d='M7.247 11.14 2.451 5.658C1.885 5.013 2.345 4 3.204 4h9.592a1 1 0 0 1 .753 1.659l-4.796 5.48a1 1 0 0 1-1.506 0z'/%3E%3C/svg%3E");
            background-repeat: no-repeat;
            background-position: right 15px center;
            padding-right: 40px;
        }
        
        .btn {
            display: inline-block;
            padding: 12px 24px;
            border: none;
            border-radius: 6px;
            font-weight: 600;
            cursor: pointer;
            transition: all 0.3s ease;
            font-family: 'Poppins', sans-serif;
            font-size: 1rem;
        }
        
        .btn-primary {
            background-color: var(--primary);
            color: white;
        }
        
        .btn-primary:hover {
            background-color: var(--primary-light);
            transform: translateY(-2px);
            box-shadow: 0 5px 15px rgba(16, 163, 127, 0.4);
        }
        
        .btn-primary:disabled {
            background-color: #555;
            cursor: not-allowed;
            transform: none;
            box-shadow: none;
        }
        
        .btn-success {
            background-color: var(--success);
            color: white;
        }
        
        .btn-success:hover {
            background-color: #3d9c40;
            transform: translateY(-2px);
            box-shadow: 0 5px 15px rgba(76, 175, 80, 0.4);
        }
        
        .token-info {
            background-color: rgba(255, 255, 255, 0.05);
            padding: 15px;
            border-radius: 6px;
            margin-bottom: 20px;
            border: 1px solid var(--border-color);
        }
        
        .token-info p {
            margin: 5px 0;
            display: flex;
            justify-content: space-between;
        }
        
        .text-danger {
            color: var(--error);
            margin-top: 10px;
        }
        
        .text-danger a {
            color: var(--primary-light);
            text-decoration: none;
        }
        
        .text-danger a:hover {
            text-decoration: underline;
        }
        
        .alert {
            padding: 15px;
            border-radius: 6px;
            margin-bottom: 20px;
        }
        
        .alert-danger {
            background-color: rgba(244, 67, 54, 0.1);
            border: 1px solid rgba(244, 67, 54, 0.3);
            color: var(--error);
        }
        
        .mt-3 {
            margin-top: 15px;
        }
        
        .mt-4 {
            margin-top: 20px;
        }
        
        .summary-content {
            background-color: rgba(255, 255, 255, 0.05);
            padding: 20px;
            border-radius: 6px;
            white-space: pre-line;
            line-height: 1.8;
            border: 1px solid var(--border-color);
        }
        
        .flashcards-container {
            display: grid;
            grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));
            gap: 20px;
            margin-bottom: 20px;
        }
        
        .flashcard {
            height: 200px;
            perspective: 1000px;
            position: relative;
        }
        
        .flashcard-front, .flashcard-back {
            position: absolute;
            width: 100%;
            height: 100%;
            backface-visibility: hidden;
            transition: transform 0.6s;
            border-radius: 8px;
            padding: 20px;
            display: flex;
            align-items: center;
            justify-content: center;
            text-align: center;
            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);
        }
        
        .flashcard-front {
            background-color: var(--primary-dark);
            transform: rotateY(0deg);
            font-weight: 600;
        }
        
        .flashcard-back {
            background-color: var(--card-bg);
            transform: rotateY(180deg);
        }
        
        .flashcard:hover .flashcard-front {
            transform: rotateY(180deg);
        }
        
        .flashcard:hover .flashcard-back {
            transform: rotateY(0deg);
        }
        
        @media (max-width: 768px) {
            body {
                padding: 60px 0;
            }
            
            h1 {
                font-size: 2rem;
            }
            
            .flashcards-container {
                grid-template-columns: 1fr;
            }
        }
    </style>
</head>
<body>
    <div class="container">
        <h1><i class="fas fa-file-alt"></i> Document Summarizer</h1>
        <p class="description">Upload your documents to generate concise summaries and key points using OpenAI's powerful GPT models. You can then convert these summaries into flashcards or quiz questions.</p>
        
        <% if (locals.error) { %>
            <div class="alert alert-danger"><i class="fas fa-exclamation-circle"></i> <%= error %></div>
        <% } %>
        
        <div class="card">
            <div class="card-header">
                <h2><i class="fas fa-upload"></i> Upload Document</h2>
            </div>
            <div class="card-body">
                <form action="/summarize" method="POST" enctype="multipart/form-data">
                    <div class="form-group">
                        <label for="document"><i class="fas fa-file-pdf"></i> Select Document (PDF, TXT, DOCX)</label>
                        <input type="file" id="document" name="document" class="form-control" required accept=".pdf,.txt,.docx">
                    </div>
                    
                    <div class="form-group">
                        <label for="summaryType"><i class="fas fa-list-alt"></i> Summary Type</label>
                        <select id="summaryType" name="summaryType" class="form-control">
                            <option value="concise">Concise Summary (shorter)</option>
                            <option value="detailed">Detailed Summary (longer)</option>
                            <option value="keypoints">Key Points Only</option>
                        </select>
                    </div>
                    
                    <div class="form-group">
                        <label for="outputFormat"><i class="fas fa-file-export"></i> Output Format</label>
                        <select id="outputFormat" name="outputFormat" class="form-control">
                            <option value="summary">Text Summary</option>
                            <option value="flashcards">Flashcards</option>
                            <option value="quiz">Quiz Questions</option>
                        </select>
                    </div>
                    
                    <div class="token-info">
                        <p><i class="fas fa-coins"></i> Token Cost: <span id="tokenCost"><%= tokenPrices?.SUMMARIZE || 5 %></span></p>
                        <p><i class="fas fa-wallet"></i> Your Balance: <span id="tokenBalance">Loading...</span></p>
                        <div id="tokenWarning" style="display: none;">
                            <p class="text-danger"><i class="fas fa-exclamation-triangle"></i> You don't have enough tokens. <a href="/tokenbuy">Buy more</a></p>
                        </div>
                    </div>
                    
                    <button type="submit" id="submitButton" class="btn btn-primary" disabled>
                        <i class="fas fa-magic"></i> Generate Summary
                    </button>
                </form>
            </div>
        </div>
        
        <% if (locals.summary) { %>
            <div class="card mt-4">
                <div class="card-header">
                    <h2><i class="fas fa-file-alt"></i> Generated Summary</h2>
                </div>
                <div class="card-body">
                    <% if (outputFormat === 'summary') { %>
                        <div class="summary-content">
                            <%= summary %>
                        </div>
                        <button class="btn btn-success mt-3" id="createFlashcardsBtn">
                            <i class="fas fa-clone"></i> Convert to Flashcards
                        </button>
                    <% } else if (outputFormat === 'flashcards' || outputFormat === 'quiz') { %>
                        <div class="flashcards-container">
                            <% for(let i=0; i < cards.length; i++) { %>
                                <div class="flashcard">
                                    <div class="flashcard-front"><%= cards[i].front %></div>
                                    <div class="flashcard-back"><%= cards[i].back %></div>
                                </div>
                            <% } %>
                        </div>
                        <form action="/save-deck" method="POST" class="mt-3">
                            <input type="hidden" name="cards" value="<%= JSON.stringify(cards) %>">
                            <div class="form-group">
                                <label for="deckTitle"><i class="fas fa-heading"></i> Deck Title</label>
                                <input type="text" id="deckTitle" name="deckTitle" class="form-control" required>
                            </div>
                            <button type="submit" class="btn btn-success">
                                <i class="fas fa-save"></i> Save as Deck
                            </button>
                        </form>
                    <% } %>
                </div>
            </div>
        <% } %>
    </div>
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            const summaryTypeSelect = document.getElementById('summaryType');
            const outputFormatSelect = document.getElementById('outputFormat');
            const tokenCostElement = document.getElementById('tokenCost');
            const tokenBalanceElement = document.getElementById('tokenBalance');
            const tokenWarning = document.getElementById('tokenWarning');
            const submitButton = document.getElementById('submitButton');
            
            // Fetch real-time token balance
            function fetchTokenBalance() {
                fetch('/api/user/token-balance')
                    .then(response => response.json())
                    .then(data => {
                        if (data.success) {
                            tokenBalanceElement.textContent = data.tokens;
                            updateTokenCost(); // Update UI based on new balance
                        } else {
                            tokenBalanceElement.textContent = '0';
                            tokenWarning.style.display = 'block';
                            submitButton.disabled = true;
                        }
                    })
                    .catch(error => {
                        console.error('Error fetching token balance:', error);
                        tokenBalanceElement.textContent = 'Error';
                    });
            }
            
            // Initial fetch
            fetchTokenBalance();
            
            // Update token cost based on selections
            function updateTokenCost() {
                let cost = 5; // Base cost from TOKEN_PRICES.SUMMARIZE
                
                if (summaryTypeSelect.value === 'detailed') {
                    cost += 2;
                } else if (summaryTypeSelect.value === 'keypoints') {
                    cost += 1;
                }
                
                if (outputFormatSelect.value === 'flashcards') {
                    cost += 3;
                } else if (outputFormatSelect.value === 'quiz') {
                    cost += 4;
                }
                
                tokenCostElement.textContent = cost;
                
                // Check if user has enough tokens
                const currentBalance = parseInt(tokenBalanceElement.textContent);
                if (isNaN(currentBalance) || currentBalance < cost) {
                    submitButton.disabled = true;
                    tokenWarning.style.display = 'block';
                } else {
                    submitButton.disabled = false;
                    tokenWarning.style.display = 'none';
                }
            }
            
            if (summaryTypeSelect && outputFormatSelect) {
                summaryTypeSelect.addEventListener('change', updateTokenCost);
                outputFormatSelect.addEventListener('change', updateTokenCost);
                
                // Initial cost calculation
                updateTokenCost();
            }
            
            // Handle flashcard conversion button
            const createFlashcardsBtn = document.getElementById('createFlashcardsBtn');
            if (createFlashcardsBtn) {
                createFlashcardsBtn.addEventListener('click', function() {
                    const summaryContent = document.querySelector('.summary-content').textContent.trim();
                    
                    if (!summaryContent) {
                        alert('No summary content found to convert');
                        return;
                    }
                    
                    // Show loading state
                    createFlashcardsBtn.disabled = true;
                    createFlashcardsBtn.innerHTML = '<i class="fas fa-spinner fa-spin"></i> Converting...';
                    
                    fetch('/api/convert-to-flashcards', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json'
                        },
                        body: JSON.stringify({ content: summaryContent })
                    })
                    .then(response => {
                        if (!response.ok) {
                            return response.json().then(data => {
                                throw new Error(data.error || 'Failed to convert to flashcards');
                            });
                        }
                        return response.json();
                    })
                    .then(data => {
                        if (data.success) {
                            window.location.href = '/flashcards-preview?id=' + data.previewId;
                        } else {
                            throw new Error(data.error || 'Unknown error occurred');
                        }
                    })
                    .catch(error => {
                        console.error('Error:', error);
                        alert('Error: ' + error.message);
                        createFlashcardsBtn.disabled = false;
                        createFlashcardsBtn.innerHTML = '<i class="fas fa-clone"></i> Convert to Flashcards';
                    });
                });
            }
            
            // Add file input enhancement
            const fileInput = document.getElementById('document');
            if (fileInput) {
                fileInput.addEventListener('change', function() {
                    const fileName = this.files[0]?.name;
                    if (fileName) {
                        const fileLabel = this.previousElementSibling;
                        fileLabel.innerHTML = `<i class="fas fa-file-pdf"></i> Selected: ${fileName}`;
                        
                        // Enable submit button if file is selected and user has enough tokens
                        updateTokenCost();
                    }
                });
            }
            
            // Form validation
            const form = document.querySelector('form');
            if (form) {
                form.addEventListener('submit', function(event) {
                    if (!fileInput || !fileInput.files || fileInput.files.length === 0) {
                        event.preventDefault();
                        alert('Please select a file to summarize');
                    }
                });
            }
        });
    </script>
</body>
</html>
