<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>LEARNO.ME - AI Learning Assistant</title>
    <link href="https://fonts.googleapis.com/css2?family=Poppins:wght@300;400;500;600;700&display=swap" rel="stylesheet">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.7.0/styles/atom-one-dark.min.css">
    <script src="https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.7.0/highlight.min.js"></script>
    <style>
        :root {
            --primary: #6C63FF;
            --primary-light: #8A84FF;
            --primary-dark: #5A52D5;
            --secondary: #4CAF50;
            --dark-bg: #0F0F13;
            --card-bg: #1A1A22;
            --input-bg: #252532;
            --text-primary: #FFFFFF;
            --text-secondary: #B0B0B0;
            --accent: #FF5722;
            --success: #4CAF50;
            --warning: #FFC107;
            --error: #F44336;
            --gradient-start: rgba(108, 99, 255, 0.2);
            --gradient-end: rgba(0, 0, 0, 0);
            --bot-message: #2A2A36;
            --user-message: #3A3A7A;
            --code-bg: #1E1E2D;
            --search-bg: #2E2E3E;
            --deep-think-bg: #3E2E3E;
        }
        
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }
        
        body {
            font-family: 'Poppins', sans-serif;
            background-color: var(--dark-bg);
            color: var(--text-primary);
            line-height: 1.6;
            min-height: 100vh;
            display: flex;
            flex-direction: column;
            background: linear-gradient(135deg, var(--dark-bg), #191922);
        }
        
        .container {
            width: 100%;
            max-width: 1400px;
            margin: 0 auto;
            padding: 0 20px;
        }
        
        header {
            background-color: rgba(26, 26, 34, 0.95);
            backdrop-filter: blur(10px);
            position: sticky;
            top: 0;
            z-index: 100;
            box-shadow: 0 2px 10px rgba(0, 0, 0, 0.2);
        }
        
        .navbar {
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding: 15px 0;
        }
        
        .logo {
            font-size: 24px;
            font-weight: 700;
            color: var(--text-primary);
            text-decoration: none;
            display: flex;
            align-items: center;
            gap: 10px;
        }
        
        .logo i {
            color: var(--primary);
        }
        
        .nav-links {
            display: flex;
            list-style: none;
            gap: 30px;
            align-items: center;
        }
        
        .nav-links a {
            color: var(--text-secondary);
            text-decoration: none;
            font-weight: 500;
            transition: color 0.3s;
            display: flex;
            align-items: center;
            gap: 8px;
        }
        
        .nav-links a:hover, .nav-links a.active {
            color: var(--primary);
        }
        
        .btn {
            display: inline-flex;
            align-items: center;
            justify-content: center;
            gap: 8px;
            padding: 10px 20px;
            border-radius: 50px;
            font-weight: 600;
            text-decoration: none;
            transition: all 0.3s;
            cursor: pointer;
            border: none;
            font-family: 'Poppins', sans-serif;
        }
        
        .btn-primary {
            background-color: var(--primary);
            color: white;
        }
        
        .btn-primary:hover {
            background-color: var(--primary-dark);
            transform: translateY(-2px);
            box-shadow: 0 5px 15px rgba(108, 99, 255, 0.3);
        }
        
        .btn-outline {
            background-color: transparent;
            color: var(--primary);
            border: 2px solid var(--primary);
        }
        
        .btn-outline:hover {
            background-color: var(--primary);
            color: white;
        }
        
        .btn-secondary {
            background-color: var(--secondary);
            color: white;
        }
        
        .btn-secondary:hover {
            background-color: #3d8c40;
            transform: translateY(-2px);
            box-shadow: 0 5px 15px rgba(76, 175, 80, 0.3);
        }
        
        .btn-search {
            background-color: var(--search-bg);
            color: white;
        }
        
        .btn-search:hover {
            background-color: #3a3a4a;
            transform: translateY(-2px);
            box-shadow: 0 5px 15px rgba(46, 46, 62, 0.3);
        }
        
        .btn-deep-think {
            background-color: var(--deep-think-bg);
            color: white;
        }
        
        .btn-deep-think:hover {
            background-color: #4a3a4a;
            transform: translateY(-2px);
            box-shadow: 0 5px 15px rgba(62, 46, 62, 0.3);
        }
        
        main {
            flex: 1;
            padding: 20px 0;
            display: flex;
            flex-direction: column;
        }
        
        .chatbot-container {
            display: flex;
            height: calc(100vh - 130px);
            gap: 20px;
        }
        
        .sidebar {
            width: 300px;
            background-color: var(--card-bg);
            border-radius: 12px;
            padding: 20px;
            display: flex;
            flex-direction: column;
            box-shadow: 0 4px 20px rgba(0, 0, 0, 0.15);
            transition: all 0.3s ease;
            overflow: hidden;
        }
        
        .sidebar-collapsed {
            width: 80px;
            padding: 20px 10px;
        }
        
        .sidebar-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 20px;
        }
        
        .sidebar-title {
            font-weight: 600;
            font-size: 18px;
            white-space: nowrap;
            overflow: hidden;
            text-overflow: ellipsis;
        }
        
        .toggle-sidebar {
            background: none;
            border: none;
            color: var(--text-secondary);
            cursor: pointer;
            font-size: 16px;
            transition: color 0.2s;
        }
        
        .toggle-sidebar:hover {
            color: var(--primary);
        }
        
        .action-buttons {
            display: flex;
            flex-direction: column;
            gap: 10px;
            margin-bottom: 20px;
        }
        
        .new-chat-btn, .upload-btn {
            display: flex;
            align-items: center;
            justify-content: center;
            gap: 10px;
            padding: 12px;
            white-space: nowrap;
            overflow: hidden;
        }
        
        .btn-icon-only {
            width: 100%;
            padding: 12px;
            justify-content: center;
        }
        
        .btn-icon-only span {
            display: none;
        }
        
        .conversation-list {
            flex: 1;
            overflow-y: auto;
            display: flex;
            flex-direction: column;
            gap: 10px;
            scrollbar-width: thin;
            scrollbar-color: var(--primary-dark) var(--card-bg);
        }
        
        .conversation-list::-webkit-scrollbar {
            width: 6px;
        }
        
        .conversation-list::-webkit-scrollbar-track {
            background: var(--card-bg);
        }
        
        .conversation-list::-webkit-scrollbar-thumb {
            background-color: var(--primary-dark);
            border-radius: 6px;
        }
        
        .conversation-item {
            padding: 12px 15px;
            border-radius: 8px;
            background-color: var(--input-bg);
            cursor: pointer;
            transition: all 0.2s;
            display: flex;
            align-items: center;
            gap: 10px;
        }
        
        .conversation-item:hover {
            background-color: #2c2c3a;
        }
        
        .conversation-item.active {
            background-color: var(--primary-dark);
        }
        
        .conversation-item i {
            color: var(--text-secondary);
            min-width: 16px;
        }
        
        .conversation-title {
            flex: 1;
            white-space: nowrap;
            overflow: hidden;
            text-overflow: ellipsis;
            font-size: 14px;
        }
        
        .delete-convo {
            color: var(--text-secondary);
            opacity: 0;
            transition: opacity 0.2s;
            min-width: 16px;
        }
        
        .conversation-item:hover .delete-convo {
            opacity: 1;
        }
        
        .chat-area {
            flex: 1;
            display: flex;
            flex-direction: column;
            background-color: var(--card-bg);
            border-radius: 12px;
            overflow: hidden;
            box-shadow: 0 4px 20px rgba(0, 0, 0, 0.15);
        }
        
        .chat-header {
            padding: 15px 20px;
            background-color: rgba(37, 37, 50, 0.5);
            display: flex;
            align-items: center;
            justify-content: space-between;
            border-bottom: 1px solid rgba(255, 255, 255, 0.1);
        }
        
        .chat-title {
            font-weight: 600;
            font-size: 18px;
            display: flex;
            align-items: center;
            gap: 10px;
        }
        
        .token-display {
            display: flex;
            align-items: center;
            gap: 8px;
            background-color: rgba(108, 99, 255, 0.2);
            padding: 6px 12px;
            border-radius: 50px;
            font-size: 14px;
        }
        
        .token-display i {
            color: var(--primary);
        }
        
        .chat-actions {
            display: flex;
            gap: 15px;
            align-items: center;
        }
        
        .chat-action-btn {
            background: none;
            border: none;
            color: var(--text-secondary);
            cursor: pointer;
            font-size: 16px;
            transition: color 0.2s;
            display: flex;
            align-items: center;
            gap: 5px;
        }
        
        .chat-action-btn:hover {
            color: var(--primary);
        }
        
        .chat-action-btn span {
            font-size: 14px;
        }
        
        .mode-selector {
            display: flex;
            gap: 10px;
            margin-right: 15px;
        }
        
        .mode-btn {
            background-color: var(--input-bg);
            color: var(--text-secondary);
            border: none;
            border-radius: 50px;
            padding: 6px 12px;
            font-size: 14px;
            cursor: pointer;
            transition: all 0.2s;
            display: flex;
            align-items: center;
            gap: 5px;
        }
        
        .mode-btn:hover, .mode-btn.active {
            background-color: var(--primary);
            color: white;
        }
        
        .messages-container {
            flex: 1;
            overflow-y: auto;
            padding: 20px;
            display: flex;
            flex-direction: column;
            gap: 15px;
            scrollbar-width: thin;
            scrollbar-color: var(--primary-dark) var(--card-bg);
        }
        
        .messages-container::-webkit-scrollbar {
            width: 6px;
        }
        
        .messages-container::-webkit-scrollbar-track {
            background: var(--card-bg);
        }
        
        .messages-container::-webkit-scrollbar-thumb {
            background-color: var(--primary-dark);
            border-radius: 6px;
        }
        
        .message {
            max-width: 85%;
            padding: 15px;
            border-radius: 12px;
            animation: fadeIn 0.3s ease-out;
            position: relative;
        }
        
        @keyframes fadeIn {
            from { opacity: 0; transform: translateY(10px); }
            to { opacity: 1; transform: translateY(0); }
        }
        
        .bot-message {
            align-self: flex-start;
            background-color: var(--bot-message);
            border-bottom-left-radius: 4px;
        }
        
        .user-message {
            align-self: flex-end;
            background-color: var(--user-message);
            border-bottom-right-radius: 4px;
        }
        
        .search-message {
            background-color: var(--search-bg);
            border-bottom-left-radius: 4px;
        }
        
        .deep-think-message {
            background-color: var(--deep-think-bg);
            border-bottom-left-radius: 4px;
        }
        
        .message-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 8px;
        }
        
        .message-role {
            font-weight: 600;
            font-size: 14px;
            display: flex;
            align-items: center;
            gap: 6px;
        }
        
        .message-role i {
            font-size: 12px;
        }
        
        .message-actions {
            display: flex;
            gap: 10px;
        }
        
        .message-action {
            background: none;
            border: none;
            color: var(--text-secondary);
            cursor: pointer;
            font-size: 14px;
            opacity: 0;
            transition: all 0.2s;
        }
        
        .message:hover .message-action {
            opacity: 1;
        }
        
        .message-action:hover {
            color: var(--primary);
        }
        
        .message-content {
            white-space: pre-wrap;
            line-height: 1.6;
        }
        
        .message-content code {
            background-color: rgba(0, 0, 0, 0.2);
            padding: 2px 5px;
            border-radius: 4px;
            font-family: 'Fira Code', monospace;
        }
        
        .message-content pre {
            background-color: var(--code-bg);
            padding: 15px;
            border-radius: 8px;
            overflow-x: auto;
            margin: 15px 0;
            position: relative;
        }
        
        .message-content pre code {
            background-color: transparent;
            padding: 0;
            font-family: 'Fira Code', monospace;
        }
        
        .copy-code-btn {
            position: absolute;
            top: 5px;
            right: 5px;
            background-color: rgba(255, 255, 255, 0.1);
            color: var(--text-secondary);
            border: none;
            border-radius: 4px;
            padding: 5px 8px;
            font-size: 12px;
            cursor: pointer;
            transition: all 0.2s;
            display: flex;
            align-items: center;
            gap: 5px;
        }
        
        .copy-code-btn:hover {
            background-color: rgba(255, 255, 255, 0.2);
            color: white;
        }
        
        .message-time {
            font-size: 12px;
            color: var(--text-secondary);
            margin-top: 8px;
            text-align: right;
        }
        
        .input-area {
            padding: 15px 20px;
            background-color: rgba(37, 37, 50, 0.5);
            border-top: 1px solid rgba(255, 255, 255, 0.1);
            display: flex;
            flex-direction: column;
            gap: 10px;
        }
        
        .input-options {
            display: flex;
            justify-content: space-between;
            align-items: center;
        }
        
        .input-modes {
            display: flex;
            gap: 10px;
        }
        
        .input-mode-btn {
            background: none;
            border: none;
            color: var(--text-secondary);
            cursor: pointer;
            font-size: 14px;
            padding: 5px 10px;
            border-radius: 4px;
            transition: all 0.2s;
            display: flex;
            align-items: center;
            gap: 5px;
        }
        
        .input-mode-btn:hover, .input-mode-btn.active {
            background-color: rgba(108, 99, 255, 0.2);
            color: var(--primary);
        }
        
        .input-wrapper {
            display: flex;
            gap: 15px;
            align-items: flex-end;
        }
        
        .message-input {
            flex: 1;
            background-color: var(--input-bg);
            border: 1px solid rgba(255, 255, 255, 0.1);
            border-radius: 8px;
            padding: 12px 15px;
            color: var(--text-primary);
            font-family: 'Poppins', sans-serif;
            resize: none;
            min-height: 50px;
            max-height: 150px;
            transition: all 0.3s;
        }
        
        .message-input:focus {
            outline: none;
            border-color: var(--primary);
            box-shadow: 0 0 0 2px rgba(108, 99, 255, 0.2);
        }
        
        .send-btn {
            background-color: var(--primary);
            color: white;
            border: none;
            border-radius: 8px;
            width: 50px;
            height: 50px;
            display: flex;
            align-items: center;
            justify-content: center;
            cursor: pointer;
            transition: all 0.3s;
        }
        
        .send-btn:hover {
            background-color: var(--primary-dark);
            transform: translateY(-2px);
        }
        
        .send-btn:disabled {
            background-color: #3d3d4d;
            cursor: not-allowed;
            transform: none;
        }
        
        .upload-modal {
            display: none;
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background-color: rgba(0, 0, 0, 0.7);
            z-index: 1000;
            justify-content: center;
            align-items: center;
        }
        
        .modal-content {
            background-color: var(--card-bg);
            border-radius: 12px;
            padding: 30px;
            width: 90%;
            max-width: 500px;
            box-shadow: 0 5px 30px rgba(0, 0, 0, 0.3);
        }
        
        .modal-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 20px;
        }
        
        .modal-title {
            font-size: 20px;
            font-weight: 600;
        }
        
        .close-modal {
            background: none;
            border: none;
            color: var(--text-secondary);
            font-size: 24px;
            cursor: pointer;
        }
        
        .file-upload-area {
            border: 2px dashed rgba(255, 255, 255, 0.2);
            border-radius: 8px;
            padding: 30px;
            text-align: center;
            margin-bottom: 20px;
            cursor: pointer;
            transition: all 0.3s;
        }
        
        .file-upload-area:hover {
            border-color: var(--primary);
            background-color: rgba(108, 99, 255, 0.05);
        }
        
        .file-upload-icon {
            font-size: 40px;
            color: var(--primary);
            margin-bottom: 15px;
        }
        
        .file-upload-text {
            margin-bottom: 10px;
        }
        
        .file-upload-info {
            font-size: 14px;
            color: var(--text-secondary);
        }
        
        .file-input {
            display: none;
        }
        
        .selected-file {
            display: none;
            background-color: var(--input-bg);
            padding: 10px 15px;
            border-radius: 8px;
            margin-bottom: 20px;
        }
        
        .file-name {
            font-weight: 500;
            margin-bottom: 5px;
        }
        
        .file-size {
            font-size: 12px;
            color: var(--text-secondary);
        }
        
        .upload-actions {
            display: flex;
            justify-content: flex-end;
            gap: 15px;
        }
        
        .welcome-screen {
            display: flex;
            flex-direction: column;
            align-items: center;
            justify-content: center;
            height: 100%;
            text-align: center;
            padding: 20px;
        }
        
        .welcome-icon {
            font-size: 60px;
            color: var(--primary);
            margin-bottom: 20px;
        }
        
        .welcome-title {
            font-size: 28px;
            font-weight: 600;
            margin-bottom: 15px;
        }
        
        .welcome-description {
            color: var(--text-secondary);
            max-width: 600px;
            margin-bottom: 30px;
        }
        
        .features-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
            gap: 20px;
            width: 100%;
            max-width: 800px;
            margin-bottom: 30px;
        }
        
        .feature-card {
            background-color: var(--input-bg);
            border-radius: 10px;
            padding: 20px;
            text-align: center;
            transition: transform 0.3s;
        }
        
        .feature-card:hover {
            transform: translateY(-5px);
        }
        
        .feature-icon {
            font-size: 30px;
            color: var(--primary);
            margin-bottom: 15px;
        }
        
        .feature-title {
            font-weight: 600;
            margin-bottom: 10px;
        }
        
        .feature-description {
            font-size: 14px;
            color: var(--text-secondary);
        }
        
        .typing-indicator {
            display: flex;
            align-items: center;
            gap: 5px;
            padding: 10px 15px;
            background-color: var(--bot-message);
            border-radius: 12px;
            align-self: flex-start;
            margin-bottom: 10px;
            animation: fadeIn 0.3s ease-out;
        }
        
        .typing-dots {
            display: flex;
            gap: 4px;
        }
        
        .typing-dots span {
            width: 8px;
            height: 8px;
            background-color: var(--text-secondary);
            border-radius: 50%;
            display: inline-block;
            animation: typingAnimation 1.4s infinite ease-in-out;
        }
        
        .typing-dots span:nth-child(1) {
            animation-delay: 0s;
        }
        
        .typing-dots span:nth-child(2) {
            animation-delay: 0.2s;
        }
        
        .typing-dots span:nth-child(3) {
            animation-delay: 0.4s;
        }
        
        @keyframes typingAnimation {
            0%, 100% {
                transform: translateY(0);
            }
            50% {
                transform: translateY(-5px);
            }
        }
        
        .error-message {
            align-self: center;
            background-color: rgba(244, 67, 54, 0.2);
            color: var(--error);
            border-radius: 8px;
            padding: 10px 15px;
            margin: 10px 0;
            text-align: center;
        }
        
        .mobile-menu-toggle {
            display: none;
            background: none;
            border: none;
            color: var(--text-secondary);
            font-size: 24px;
            cursor: pointer;
        }
        
        /* Responsive styles */
        @media (max-width: 1200px) {
            .chatbot-container {
                height: calc(100vh - 120px);
            }
            
            .sidebar {
                width: 250px;
            }
        }
        
        @media (max-width: 992px) {
            .mode-selector {
                display: none;
            }
            
            .chat-action-btn span {
                display: none;
            }
        }
        
        @media (max-width: 768px) {
            .mobile-menu-toggle {
                display: block;
            }
            
            .chatbot-container {
                flex-direction: column;
                height: auto;
            }
            
            .sidebar {
                position: fixed;
                left: -300px;
                top: 70px;
                height: calc(100vh - 70px);
                z-index: 99;
                transition: left 0.3s ease;
                width: 280px;
            }
            
            .sidebar.active {
                left: 0;
            }
            
            .sidebar-collapsed {
                width: 280px;
            }
            
            .chat-area {
                height: calc(100vh - 150px);
            }
            
            .message {
                max-width: 90%;
            }
            
            .nav-links {
                position: fixed;
                top: 70px;
                left: -100%;
                width: 100%;
                height: calc(100vh - 70px);
                background-color: var(--card-bg);
                flex-direction: column;
                padding: 20px;
                transition: left 0.3s ease;
                z-index: 98;
            }
            
            .nav-links.active {
                left: 0;
            }
            
            .nav-overlay {
                position: fixed;
                top: 0;
                left: 0;
                width: 100%;
                height: 100%;
                background-color: rgba(0, 0, 0, 0.7);
                z-index: 97;
                opacity: 0;
                visibility: hidden;
                transition: all 0.3s ease;
            }
            
            .nav-overlay.active {
                opacity: 1;
                visibility: visible;
            }
            
            .input-options {
                flex-wrap: wrap;
                gap: 10px;
            }
            
            .input-modes {
                width: 100%;
                justify-content: space-between;
            }
        }
        
        @media (max-width: 576px) {
            .features-grid {
                grid-template-columns: 1fr;
            }
            
            .welcome-title {
                font-size: 24px;
            }
            
            .welcome-description {
                font-size: 14px;
            }
            
            .message-content pre {
                max-width: 100%;
                overflow-x: auto;
            }
            
            .input-mode-btn span {
                display: none;
            }
        }
    </style>
</head>
<body>
    <header>
        <div class="container">
            <nav class="navbar">
                <button class="mobile-menu-toggle" id="mobileMenuToggle">
                    <i class="fas fa-bars"></i>
                </button>
                <a href="/" class="logo">
                    <i class="fas fa-brain"></i> LEARNO.ME
                </a>
                <ul class="nav-links" id="navLinks">
                    <li><a href="/">Home</a></li>
                    <li><a href="/decks">My Decks</a></li>
                    <li><a href="/chatbot" class="active">AI Chat</a></li>
                    <li><a href="/account">Account</a></li>
                    <li><a href="/logout" class="btn btn-outline">Logout</a></li>
                </ul>
                <div class="nav-overlay" id="navOverlay"></div>
            </nav>
        </div>
    </header>

    <main>
        <div class="container">
            <div class="chatbot-container">
                <div class="sidebar">
                    <button id="newChatBtn" class="btn btn-primary new-chat-btn">
                        <i class="fas fa-plus"></i> New Conversation
                    </button>
                    <button id="uploadBtn" class="btn upload-btn">
                        <i class="fas fa-file-upload"></i> Upload File
                    </button>
                    <div class="conversation-list" id="conversationList">
                        <!-- Conversations will be added here dynamically -->
                    </div>
                </div>
                
                <div class="chat-area">
                    <div class="chat-header">
                        <div class="chat-title" id="chatTitle">New Conversation</div>
                        <div class="chat-actions">
                            <button class="chat-action-btn" id="exportBtn" title="Export conversation">
                                <i class="fas fa-download"></i>
                            </button>
                            <button class="chat-action-btn" id="clearBtn" title="Clear conversation">
                                <i class="fas fa-trash"></i>
                            </button>
                        </div>
                    </div>
                    
                    <div class="messages-container" id="messagesContainer">
                        <div class="welcome-screen" id="welcomeScreen">
                            <div class="welcome-icon">
                                <i class="fas fa-robot"></i>
                            </div>
                            <h1 class="welcome-title">Welcome to LEARNO.ME AI Chat</h1>
                            <p class="welcome-description">
                                Your personal AI learning assistant powered by GPT-3.5. Ask questions, get explanations,
                                and enhance your learning experience with intelligent conversations.
                            </p>
                            
                            <div class="features-grid">
                                <div class="feature-card">
                                    <div class="feature-icon">
                                        <i class="fas fa-comments"></i>
                                    </div>
                                    <h3 class="feature-title">Smart Conversations</h3>
                                    <p class="feature-description">
                                        Ask questions and get detailed explanations on any topic
                                    </p>
                                </div>
                                
                                <div class="feature-card">
                                    <div class="feature-icon">
                                        <i class="fas fa-file-alt"></i>
                                    </div>
                                    <h3 class="feature-title">File Analysis</h3>
                                    <p class="feature-description">
                                        Upload documents and get insights or summaries
                                    </p>
                                </div>
                                
                                <div class="feature-card">
                                    <div class="feature-icon">
                                        <i class="fas fa-lightbulb"></i>
                                    </div>
                                    <h3 class="feature-title">Learning Aid</h3>
                                    <p class="feature-description">
                                        Get help with homework, research, and studying
                                    </p>
                                </div>
                            </div>
                            
                            <button class="btn btn-primary" id="startChatBtn">
                                Start Chatting Now
                            </button>
                        </div>
                        <!-- Messages will be added here dynamically -->
                    </div>
                    
                    <div class="input-area">
                        <div class="input-options">
                            <div class="input-modes">
                                <button class="input-mode-btn active" data-mode="normal">
                                    <i class="fas fa-comment"></i> <span>Normal</span>
                                </button>
                                <button class="input-mode-btn" data-mode="deep-think">
                                    <i class="fas fa-brain"></i> <span>Deep Think</span>
                                </button>
                                <button class="input-mode-btn" data-mode="web-search">
                                    <i class="fas fa-search"></i> <span>Web Search</span>
                                </button>
                                <button class="input-mode-btn" data-mode="code">
                                    <i class="fas fa-code"></i> <span>Code Mode</span>
                                </button>
                            </div>
                        </div>
                        <textarea 
                            id="messageInput" 
                            class="message-input" 
                            placeholder="Type your message here..." 
                            rows="1"
                        ></textarea>
                        <button id="sendBtn" class="send-btn" disabled>
                            <i class="fas fa-paper-plane"></i>
                        </button>
                    </div>
                </div>
            </div>
        </div>
    </main>
    
    <div class="upload-modal" id="uploadModal">
        <div class="modal-content">
            <div class="modal-header">
                <h2 class="modal-title">Upload File</h2>
                <button class="close-modal" id="closeModal">&times;</button>
            </div>
            
            <label for="fileInput" class="file-upload-area" id="dropArea">
                <div class="file-upload-icon">
                    <i class="fas fa-cloud-upload-alt"></i>
                </div>
                <p class="file-upload-text">Drag & drop your file here or click to browse</p>
                <p class="file-upload-info">Supported formats: PDF, TXT, DOCX (Max 10MB)</p>
                <input type="file" id="fileInput" class="file-input" accept=".pdf,.txt,.docx">
            </label>
            
            <div class="selected-file" id="selectedFile">
                <div class="file-name" id="fileName">document.pdf</div>
                <div class="file-size" id="fileSize">1.2 MB</div>
            </div>
            
            <div class="upload-actions">
                <button class="btn btn-outline" id="cancelUpload">Cancel</button>
                <button class="btn btn-primary" id="confirmUpload">Upload & Analyze</button>
            </div>
        </div>
    </div>

    <script>
        document.addEventListener('DOMContentLoaded', function() {
            // DOM Elements
            const messageInput = document.getElementById('messageInput');
            const sendBtn = document.getElementById('sendBtn');
            const messagesContainer = document.getElementById('messagesContainer');
            const chatMessages = document.getElementById('messagesContainer');
            const newChatBtn = document.getElementById('newChatBtn');
            const uploadBtn = document.getElementById('uploadBtn');
            const conversationList = document.getElementById('conversationList');
            const chatTitle = document.getElementById('chatTitle');
            const exportBtn = document.getElementById('exportBtn');
            const clearBtn = document.getElementById('clearBtn');
            const welcomeScreen = document.getElementById('welcomeScreen');
            const startChatBtn = document.getElementById('startChatBtn');
            const mobileMenuToggle = document.getElementById('mobileMenuToggle');
            const navLinks = document.getElementById('navLinks');
            const navOverlay = document.getElementById('navOverlay');
            const inputModeBtns = document.querySelectorAll('.input-mode-btn');
            
            // Upload Modal Elements
            const uploadModal = document.getElementById('uploadModal');
            const closeModal = document.getElementById('closeModal');
            const fileInput = document.getElementById('fileInput');
            const dropArea = document.getElementById('dropArea');
            const selectedFile = document.getElementById('selectedFile');
            const fileName = document.getElementById('fileName');
            const fileSize = document.getElementById('fileSize');
            const cancelUpload = document.getElementById('cancelUpload');
            const confirmUpload = document.getElementById('confirmUpload');
            
            // State variables
            let conversations = JSON.parse(localStorage.getItem('conversations')) || [];
            let currentConversationId = null;
            let isTyping = false;
            let currentMode = 'normal';
            let streamingResponse = false;
            let currentResponseElement = null;
            
            // Initialize the app
            initializeApp();
            
            // Event Listeners
            messageInput.addEventListener('input', function() {
                sendBtn.disabled = messageInput.value.trim() === '';
                
                // Auto-resize textarea
                messageInput.style.height = 'auto';
                messageInput.style.height = (messageInput.scrollHeight) + 'px';
            });
            
            messageInput.addEventListener('keydown', function(e) {
                if (e.key === 'Enter' && !e.shiftKey) {
                    e.preventDefault();
                    if (!sendBtn.disabled) {
                        sendMessage();
                    }
                }
            });
            
            sendBtn.addEventListener('click', sendMessage);
            newChatBtn.addEventListener('click', createNewConversation);
            uploadBtn.addEventListener('click', openUploadModal);
            exportBtn.addEventListener('click', exportConversation);
            clearBtn.addEventListener('click', clearConversation);
            startChatBtn.addEventListener('click', hideWelcomeScreen);
            
            // Mobile menu toggle
            if (mobileMenuToggle) {
                mobileMenuToggle.addEventListener('click', function() {
                    navLinks.classList.toggle('active');
                    navOverlay.classList.toggle('active');
                });
            }
            
            if (navOverlay) {
                navOverlay.addEventListener('click', function() {
                    navLinks.classList.remove('active');
                    navOverlay.classList.remove('active');
                });
            }
            
            // Input mode buttons
            inputModeBtns.forEach(btn => {
                btn.addEventListener('click', function() {
                    inputModeBtns.forEach(b => b.classList.remove('active'));
                    this.classList.add('active');
                    currentMode = this.dataset.mode;
                    
                    // Update placeholder based on mode
                    switch(currentMode) {
                        case 'deep-think':
                            messageInput.placeholder = "Ask a complex question for deep analysis...";
                            break;
                        case 'web-search':
                            messageInput.placeholder = "Ask something that requires up-to-date information...";
                            break;
                        case 'code':
                            messageInput.placeholder = "Ask a coding question or request code examples...";
                            break;
                        default:
                            messageInput.placeholder = "Type your message here...";
                    }
                });
            });
            
            // Upload Modal Event Listeners
            closeModal.addEventListener('click', closeUploadModal);
            cancelUpload.addEventListener('click', closeUploadModal);
            confirmUpload.addEventListener('click', handleFileUpload);
            
            fileInput.addEventListener('change', function(e) {
                const file = e.target.files[0];
                if (file) {
                    displaySelectedFile(file);
                }
            });
            
            // Drag and drop functionality
            ['dragenter', 'dragover', 'dragleave', 'drop'].forEach(eventName => {
                dropArea.addEventListener(eventName, preventDefaults, false);
            });
            
            function preventDefaults(e) {
                e.preventDefault();
                e.stopPropagation();
            }
            
            ['dragenter', 'dragover'].forEach(eventName => {
                dropArea.addEventListener(eventName, highlight, false);
            });
            
            ['dragleave', 'drop'].forEach(eventName => {
                dropArea.addEventListener(eventName, unhighlight, false);
            });
            
            function highlight() {
                dropArea.style.borderColor = getComputedStyle(document.documentElement).getPropertyValue('--primary');
                dropArea.style.backgroundColor = 'rgba(108, 99, 255, 0.1)';
            }
            
            function unhighlight() {
                dropArea.style.borderColor = 'rgba(255, 255, 255, 0.2)';
                dropArea.style.backgroundColor = 'transparent';
            }
            
            dropArea.addEventListener('drop', function(e) {
                const file = e.dataTransfer.files[0];
                if (file) {
                    fileInput.files = e.dataTransfer.files;
                    displaySelectedFile(file);
                }
            });
            
            // Functions
            function initializeApp() {
                renderConversationList();
                
                if (conversations.length > 0) {
                    loadConversation(conversations[0].id);
                } else {
                    createNewConversation();
                }
            }
            
            function createNewConversation() {
                const newConversation = {
                    id: generateId(),
                    title: 'New Conversation',
                    messages: [],
                    createdAt: new Date().toISOString()
                };
                
                conversations.unshift(newConversation);
                saveConversations();
                renderConversationList();
                loadConversation(newConversation.id);
                hideWelcomeScreen();
            }
            
            function loadConversation(conversationId) {
                currentConversationId = conversationId;
                const conversation = conversations.find(c => c.id === conversationId);
                
                if (conversation) {
                    chatTitle.textContent = conversation.title;
                    renderMessages(conversation.messages);
                    
                    // Update active state in sidebar
                    const items = conversationList.querySelectorAll('.conversation-item');
                    items.forEach(item => {
                        if (item.dataset.id === conversationId) {
                            item.classList.add('active');
                        } else {
                            item.classList.remove('active');
                        }
                    });
                    
                    hideWelcomeScreen();
                }
            }
            
            function renderConversationList() {
                conversationList.innerHTML = '';
                
                conversations.forEach(conversation => {
                    const item = document.createElement('div');
                    item.className = 'conversation-item';
                    item.dataset.id = conversation.id;
                    if (conversation.id === currentConversationId) {
                        item.classList.add('active');
                    }
                    
                    item.innerHTML = `
                        <i class="fas fa-comment"></i>
                        <div class="conversation-title">${conversation.title}</div>
                        <i class="fas fa-times delete-convo"></i>
                    `;
                    
                    item.querySelector('.conversation-title').addEventListener('click', () => {
                        loadConversation(conversation.id);
                    });
                    
                    item.querySelector('.delete-convo').addEventListener('click', (e) => {
                        e.stopPropagation();
                        deleteConversation(conversation.id);
                    });
                    
                    conversationList.appendChild(item);
                });
            }
            
            function deleteConversation(conversationId) {
                if (confirm('Are you sure you want to delete this conversation?')) {
                    conversations = conversations.filter(c => c.id !== conversationId);
                    saveConversations();
                    renderConversationList();
                    
                    if (currentConversationId === conversationId) {
                        if (conversations.length > 0) {
                            loadConversation(conversations[0].id);
                        } else {
                            createNewConversation();
                        }
                    }
                }
            }
            
            function renderMessages(messages) {
                chatMessages.innerHTML = '';
                
                if (messages && Array.isArray(messages)) {
                    messages.forEach(message => {
                        if (message && message.role && message.content) {
                            appendMessage(message.role, message.content, message.timestamp, message.mode);
                        }
                    });
                }
                
                scrollToBottom();
            }
            
            function appendMessage(role, content, timestamp, mode) {
                const messageElement = document.createElement('div');
                messageElement.className = 'message';
                messageElement.classList.add(role === 'user' ? 'user-message' : 'bot-message');
                
                if (mode) {
                    messageElement.dataset.mode = mode;
                }
                
                // Format code blocks if present
                let formattedContent = content;
                if (role === 'bot') {
                    formattedContent = formatCodeBlocks(content);
                }
                
                // Add mode indicator for bot messages
                let modeIndicator = '';
                if (role === 'bot' && mode && mode !== 'normal') {
                    let modeIcon = '';
                    let modeText = '';
                    
                    switch(mode) {
                        case 'deep-think':
                            modeIcon = 'brain';
                            modeText = 'Deep Thinking';
                            break;
                        case 'web-search':
                            modeIcon = 'search';
                            modeText = 'Web Search';
                            break;
                        case 'code':
                            modeIcon = 'code';
                            modeText = 'Code Mode';
                            break;
                    }
                    
                    if (modeIcon && modeText) {
                        modeIndicator = `<div class="message-mode"><i class="fas fa-${modeIcon}"></i> ${modeText}</div>`;
                    }
                }
                
                messageElement.innerHTML = `
                    ${modeIndicator}
                    <div class="message-content">${formattedContent}</div>
                    <div class="message-time">${formatTimestamp(timestamp)}</div>
                `;
                
                chatMessages.appendChild(messageElement);
                
                // Apply syntax highlighting to code blocks
                if (role === 'bot') {
                    const codeBlocks = messageElement.querySelectorAll('pre code');
                    if (codeBlocks.length > 0 && window.hljs) {
                        codeBlocks.forEach(block => {
                            hljs.highlightElement(block);
                        });
                    }
                }
                
                scrollToBottom();
                return messageElement;
            }
            
            function formatCodeBlocks(content) {
                // Replace markdown code blocks with HTML
                return content.replace(/```(\w+)?\n([\s\S]*?)```/g, function(match, language, code) {
                    const lang = language || '';
                    return `<pre><code class="language-${lang}">${code}</code></pre>`;
                });
            }
            
            function formatTimestamp(timestamp) {
                const date = new Date(timestamp);
                return date.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' });
            }
            
            function scrollToBottom() {
                chatMessages.scrollTop = chatMessages.scrollHeight;
            }

            function sendMessage() {
                const message = messageInput.value.trim();
                if (message) {
                    appendMessage('user', message, new Date().toISOString());
                    messageInput.value = '';
                    messageInput.style.height = 'auto';
                    sendBtn.disabled = true;

                    // Save the message to the current conversation
                    const conversation = conversations.find(c => c.id === currentConversationId);
                    if (conversation) {
                        const timestamp = new Date().toISOString();
                        conversation.messages.push({
                            role: 'user',
                            content: message,
                            timestamp: timestamp
                        });
                        
                        // Update conversation title if it's a new conversation
                        if (conversation.messages.length === 1) {
                            const title = message.length > 30 ? message.substring(0, 30) + '...' : message;
                            conversation.title = title;
                            chatTitle.textContent = title;
                            renderConversationList();
                        }
                        
                        saveConversations();
                        
                        // Show typing indicator
                        showTypingIndicator();
                        
                        // Handle different modes
                        if (currentMode === 'deep-think') {
                            handleDeepThinkMode(message, conversation);
                        } else if (currentMode === 'web-search') {
                            handleWebSearchMode(message, conversation);
                        } else {
                            // Normal or code mode
                            callChatAPI(message, conversation);
                        }
                    }
                }
            }
            
            function handleDeepThinkMode(message, conversation) {
                // Create a thinking message first
                const thinkingTimestamp = new Date().toISOString();
                const thinkingContent = "I'm thinking through this step by step...";
                
                hideTypingIndicator();
                const thinkingElement = appendMessage('bot', thinkingContent, thinkingTimestamp, 'deep-think');
                
                // Call the API with deep-think mode
                fetch('/api/chat', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({
                        message: message,
                        conversationId: currentConversationId,
                        mode: 'deep-think'
                    })
                })
                .then(response => response.json())
                .then(data => {
                    if (data.error) {
                        showError(data.error);
                        return;
                    }
                    
                    // Remove the thinking message
                    thinkingElement.remove();
                    
                    // Show the thinking process
                    const thinkingProcess = data.thinkingProcess || "Let me analyze this question:\n\n1. First, I need to understand what's being asked.\n2. I'll break down the key components of the question.\n3. I'll consider different perspectives and approaches.\n4. I'll evaluate the most relevant information to include.";
                    
                    const thinkingTimestamp = new Date().toISOString();
                    appendMessage('bot', thinkingProcess, thinkingTimestamp, 'deep-think');
                    
                    // Save the thinking process
                    conversation.messages.push({
                        role: 'bot',
                        content: thinkingProcess,
                        timestamp: thinkingTimestamp,
                        mode: 'deep-think'
                    });
                    
                    // Show the final response after a short delay
                    setTimeout(() => {
                        const botTimestamp = new Date().toISOString();
                        appendMessage('bot', data.response, botTimestamp, 'deep-think');
                        
                        // Save the bot's response
                        conversation.messages.push({
                            role: 'bot',
                            content: data.response,
                            timestamp: botTimestamp,
                            mode: 'deep-think'
                        });
                        
                        saveConversations();
                        
                        // Update tokens display if provided
                        if (data.tokensRemaining !== undefined) {
                            updateTokensDisplay(data.tokensRemaining);
                        }
                    }, 2000);
                })
                .catch(error => {
                    thinkingElement.remove();
                    showError('Failed to get response from server');
                    console.error('Error:', error);
                });
            }
            
            function handleWebSearchMode(message, conversation) {
                // Create a searching message first
                const searchingTimestamp = new Date().toISOString();
                const searchingContent = "Searching the web for the most up-to-date information...";
                
                hideTypingIndicator();
                const searchingElement = appendMessage('bot', searchingContent, searchingTimestamp, 'web-search');
                
                // Call the API with web-search mode
                fetch('/api/chat', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({
                        message: message,
                        conversationId: currentConversationId,
                        mode: 'web-search'
                    })
                })
                .then(response => response.json())
                .then(data => {
                    if (data.error) {
                        showError(data.error);
                        return;
                    }
                    
                    // Remove the searching message
                    searchingElement.remove();
                    
                    // Show the search results
                    const searchResults = data.searchResults || "I searched the web and found these relevant results:\n\n1. [Source 1] - Key information about your query\n2. [Source 2] - Additional context and details\n3. [Source 3] - Alternative perspective on the topic";
                    
                    const searchTimestamp = new Date().toISOString();
                    appendMessage('bot', searchResults, searchTimestamp, 'web-search');
                    
                    // Save the search results
                    conversation.messages.push({
                        role: 'bot',
                        content: searchResults,
                        timestamp: searchTimestamp,
                        mode: 'web-search'
                    });
                    
                    // Show the final response after a short delay
                    setTimeout(() => {
                        const botTimestamp = new Date().toISOString();
                        appendMessage('bot', data.response, botTimestamp, 'web-search');
                        
                        // Save the bot's response
                        conversation.messages.push({
                            role: 'bot',
                            content: data.response,
                            timestamp: botTimestamp,
                            mode: 'web-search'
                        });
                        
                        saveConversations();
                        
                        // Update tokens display if provided
                        if (data.tokensRemaining !== undefined) {
                            updateTokensDisplay(data.tokensRemaining);
                        }
                    }, 1500);
                })
                .catch(error => {
                    searchingElement.remove();
                    showError('Failed to get response from server');
                    console.error('Error:', error);
                });
            }
            
            function callChatAPI(message, conversation) {
                // Call the API to get a response
                fetch('/api/chat', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({
                        message: message,
                        conversationId: currentConversationId,
                        mode: currentMode
                    })
                })
                .then(response => response.json())
                .then(data => {
                    hideTypingIndicator();
                    
                    if (data.error) {
                        showError(data.error);
                        return;
                    }
                    
                    const botTimestamp = new Date().toISOString();
                    appendMessage('bot', data.response, botTimestamp, currentMode);
                    
                    // Save the bot's response
                    conversation.messages.push({
                        role: 'bot',
                        content: data.response,
                        timestamp: botTimestamp,
                        mode: currentMode
                    });
                    
                    saveConversations();
                    
                    // Update tokens display if provided
                    if (data.tokensRemaining !== undefined) {
                        updateTokensDisplay(data.tokensRemaining);
                    }
                })
                .catch(error => {
                    hideTypingIndicator();
                    showError('Failed to get response from server');
                    console.error('Error:', error);
                });
            }
            
            function generateId() {
                return Date.now().toString(36) + Math.random().toString(36).substr(2);
            }
            
            function saveConversations() {
                localStorage.setItem('conversations', JSON.stringify(conversations));
            }
            
            function showTypingIndicator() {
                isTyping = true;
                const typingIndicator = document.createElement('div');
                typingIndicator.className = 'message bot-message typing-indicator';
                typingIndicator.innerHTML = '<div class="typing-dots"><span></span><span></span><span></span></div>';
                chatMessages.appendChild(typingIndicator);
                scrollToBottom();
            }
            
            function hideTypingIndicator() {
                isTyping = false;
                const typingIndicator = chatMessages.querySelector('.typing-indicator');
                if (typingIndicator) {
                    typingIndicator.remove();
                }
            }
            
            function showError(message) {
                const errorElement = document.createElement('div');
                errorElement.className = 'message error-message';
                errorElement.textContent = message;
                chatMessages.appendChild(errorElement);
                scrollToBottom();
            }
            
            function updateTokensDisplay(tokens) {
                const tokenDisplay = document.getElementById('tokenDisplay');
                if (tokenDisplay) {
                    tokenDisplay.textContent = tokens;
                }
            }
            
            function hideWelcomeScreen() {
                if (welcomeScreen) {
                    welcomeScreen.style.display = 'none';
                }
            }
            
            function openUploadModal() {
                uploadModal.style.display = 'flex';
                selectedFile.style.display = 'none';
            }
            
            function closeUploadModal() {
                uploadModal.style.display = 'none';
                fileInput.value = '';
            }
            
            function displaySelectedFile(file) {
                fileName.textContent = file.name;
                fileSize.textContent = formatFileSize(file.size);
                selectedFile.style.display = 'flex';
            }
            
            function formatFileSize(bytes) {
                if (bytes < 1024) return bytes + ' bytes';
                else if (bytes < 1048576) return (bytes / 1024).toFixed(1) + ' KB';
                else return (bytes / 1048576).toFixed(1) + ' MB';
            }
            
            function handleFileUpload() {
                const file = fileInput.files[0];
                if (!file) {
                    alert('Please select a file first');
                    return;
                }
                
                // Check file size (max 10MB)
                if (file.size > 10 * 1024 * 1024) {
                    alert('File size exceeds 10MB limit');
                    return;
                }
                
                // Check file type
                const validTypes = ['.pdf', '.txt', '.docx'];
                const fileExt = file.name.substring(file.name.lastIndexOf('.')).toLowerCase();
                if (!validTypes.includes(fileExt)) {
                    alert('Unsupported file type. Please upload PDF, TXT, or DOCX files.');
                    return;
                }
                
                const formData = new FormData();
                formData.append('file', file);
                formData.append('conversationId', currentConversationId);
                
                // Show loading state
                confirmUpload.disabled = true;
                confirmUpload.textContent = 'Uploading...';
                
                fetch('/api/upload-document', {
                    method: 'POST',
                    body: formData
                })
                .then(response => response.json())
                .then(data => {
                    closeUploadModal();
                    
                    if (data.error) {
                        showError(data.error);
                        return;
                    }
                    
                    // Add system message about the upload
                    const timestamp = new Date().toISOString();
                    appendMessage('bot', `File uploaded: ${file.name}. ${data.message || ''}`, timestamp);
                    
                    // Save the system message
                    const conversation = conversations.find(c => c.id === currentConversationId);
                    if (conversation) {
                        conversation.messages.push({
                            role: 'bot',
                            content: `File uploaded: ${file.name}. ${data.message || ''}`,
                            timestamp: timestamp
                        });
                        saveConversations();
                    }
                    
                    // Update tokens if provided
                    if (data.tokensRemaining !== undefined) {
                        updateTokensDisplay(data.tokensRemaining);
                    }
                })
                .catch(error => {
                    console.error('Error uploading file:', error);
                    showError('Failed to upload file');
                })
                .finally(() => {
                    confirmUpload.disabled = false;
                    confirmUpload.textContent = 'Upload & Analyze';
                });
            }
            
            function exportConversation() {
                const conversation = conversations.find(c => c.id === currentConversationId);
                if (!conversation || conversation.messages.length === 0) {
                    alert('No messages to export');
                    return;
                }
                
                let exportText = `# ${conversation.title}\n`;
                exportText += `# Exported on ${new Date().toLocaleString()}\n\n`;
                
                conversation.messages.forEach(message => {
                    const role = message.role === 'user' ? 'You' : 'Assistant';
                    exportText += `## ${role} (${new Date(message.timestamp).toLocaleString()})\n`;
                    exportText += `${message.content}\n\n`;
                });
                
                const blob = new Blob([exportText], { type: 'text/plain' });
                const url = URL.createObjectURL(blob);
                const a = document.createElement('a');
                a.href = url;
                a.download = `conversation-${conversation.id}.txt`;
                document.body.appendChild(a);
                a.click();
                document.body.removeChild(a);
                URL.revokeObjectURL(url);
            }
            
            function clearConversation() {
                if (confirm('Are you sure you want to clear this conversation? This cannot be undone.')) {
                    const conversation = conversations.find(c => c.id === currentConversationId);
                    if (conversation) {
                        conversation.messages = [];
                        saveConversations();
                        renderMessages([]);
                    }
                }
            }
        });
    </script>
</body>
</html>