<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>LEARNO.ME - <%= deck.title %></title>
    <link href="https://fonts.googleapis.com/css2?family=Poppins:wght@300;400;500;600;700&display=swap" rel="stylesheet">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
    <style>
        :root {
            --primary: #6C63FF;
            --secondary: #4CAF50;
            --dark-bg: #121212;
            --card-bg: #1E1E1E;
            --input-bg: #2A2A2A;
            --text-primary: #FFFFFF;
            --text-secondary: #B0B0B0;
            --accent: #FF5722;
            --success: #4CAF50;
            --warning: #FFC107;
            --error: #F44336;
        }
        
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }
        
        body {
            font-family: 'Poppins', sans-serif;
            background-color: var(--dark-bg);
            color: var(--text-primary);
            line-height: 1.6;
            min-height: 100vh;
        }
        
        .container {
            max-width: 1200px;
            margin: 0 auto;
            padding: 0 20px;
        }
        
        /* Header Styles */
        header {
            background-color: rgba(30, 30, 30, 0.8);
            backdrop-filter: blur(10px);
            position: fixed;
            width: 100%;
            top: 0;
            z-index: 1000;
            box-shadow: 0 2px 10px rgba(0, 0, 0, 0.3);
        }
        
        .navbar {
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding: 15px 0;
        }
        
        .logo {
            font-size: 24px;
            font-weight: 700;
            color: var(--primary);
            text-decoration: none;
            display: flex;
            align-items: center;
        }
        
        .logo i {
            margin-right: 10px;
        }
        
        .nav-links {
            display: flex;
            list-style: none;
        }
        
        .nav-links li {
            margin-left: 30px;
        }
        
        .nav-links a {
            color: var(--text-primary);
            text-decoration: none;
            font-weight: 500;
            transition: color 0.3s;
            display: flex;
            align-items: center;
        }
        
        .nav-links a i {
            margin-right: 8px;
        }
        
        .nav-links a:hover {
            color: var(--primary);
        }
        
        /* Main Content */
        .main-content {
            padding-top: 100px;
            padding-bottom: 50px;
        }
        
        .deck-header {
            background-color: var(--card-bg);
            border-radius: 10px;
            padding: 25px;
            margin-bottom: 30px;
            box-shadow: 0 4px 15px rgba(0, 0, 0, 0.2);
            position: relative;
            overflow: hidden;
        }
        
        .deck-header::before {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 5px;
            background: linear-gradient(90deg, var(--primary), var(--accent));
        }
        
        .deck-title {
            font-size: 28px;
            font-weight: 700;
            margin-bottom: 10px;
            color: var(--text-primary);
        }
        
        .deck-description {
            color: var(--text-secondary);
            margin-bottom: 20px;
        }
        
        .deck-meta {
            display: flex;
            align-items: center;
            color: var(--text-secondary);
            font-size: 14px;
        }
        
        .deck-meta div {
            margin-right: 20px;
            display: flex;
            align-items: center;
        }
        
        .deck-meta i {
            margin-right: 5px;
        }
        
        .action-buttons {
            display: flex;
            gap: 15px;
            margin-top: 20px;
        }
        
        .btn {
            padding: 10px 20px;
            border-radius: 6px;
            font-weight: 500;
            cursor: pointer;
            transition: all 0.3s;
            border: none;
            display: inline-flex;
            align-items: center;
            justify-content: center;
            text-decoration: none;
        }
        
        .btn i {
            margin-right: 8px;
        }
        
        .btn-primary {
            background-color: var(--primary);
            color: white;
        }
        
        .btn-primary:hover {
            background-color: #5a52d5;
            transform: translateY(-2px);
            box-shadow: 0 5px 15px rgba(108, 99, 255, 0.3);
        }
        
        .btn-secondary {
            background-color: var(--input-bg);
            color: var(--text-primary);
        }
        
        .btn-secondary:hover {
            background-color: #3a3a3a;
            transform: translateY(-2px);
            box-shadow: 0 5px 15px rgba(0, 0, 0, 0.2);
        }
        
        .btn-success {
            background-color: var(--success);
            color: white;
        }
        
        .btn-success:hover {
            background-color: #3d9140;
            transform: translateY(-2px);
            box-shadow: 0 5px 15px rgba(76, 175, 80, 0.3);
        }
        
        /* Cards Section */
        .cards-section {
            margin-top: 40px;
        }
        
        .section-title {
            font-size: 22px;
            font-weight: 600;
            margin-bottom: 20px;
            display: flex;
            align-items: center;
        }
        
        .section-title i {
            margin-right: 10px;
            color: var(--primary);
        }
        
        .cards-grid {
            display: grid;
            grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));
            gap: 20px;
            margin-top: 20px;
        }
        
        .card {
            background-color: var(--card-bg);
            border-radius: 10px;
            padding: 20px;
            box-shadow: 0 4px 15px rgba(0, 0, 0, 0.2);
            transition: transform 0.3s, box-shadow 0.3s;
            position: relative;
            overflow: hidden;
        }
        
        .card:hover {
            transform: translateY(-5px);
            box-shadow: 0 8px 25px rgba(0, 0, 0, 0.3);
        }
        
        .card-front, .card-back {
            min-height: 120px;
        }
        
        .card-label {
            font-size: 14px;
            font-weight: 600;
            color: var(--primary);
            margin-bottom: 8px;
            display: flex;
            align-items: center;
        }
        
        .card-label i {
            margin-right: 5px;
        }
        
        .card-content {
            color: var(--text-primary);
            word-break: break-word;
        }
        
        .card-divider {
            height: 1px;
            background-color: rgba(255, 255, 255, 0.1);
            margin: 15px 0;
        }
        
        .card-actions {
            display: flex;
            justify-content: space-between;
            margin-top: 15px;
        }
        
        .card-btn {
            background: none;
            border: none;
            color: var(--text-secondary);
            cursor: pointer;
            font-size: 14px;
            display: flex;
            align-items: center;
            transition: color 0.3s;
        }
        
        .card-btn i {
            margin-right: 5px;
        }
        
        .card-btn:hover {
            color: var(--primary);
        }
        
        /* Add Card Form */
        .add-card-section {
            margin-top: 40px;
            background-color: var(--card-bg);
            border-radius: 10px;
            padding: 25px;
            box-shadow: 0 4px 15px rgba(0, 0, 0, 0.2);
        }
        
        .form-group {
            margin-bottom: 20px;
        }
        
        .form-label {
            display: block;
            margin-bottom: 8px;
            font-weight: 500;
        }
        
        .form-control {
            width: 100%;
            padding: 12px 15px;
            background-color: var(--input-bg);
            border: 1px solid rgba(255, 255, 255, 0.1);
            border-radius: 6px;
            color: var(--text-primary);
            font-family: 'Poppins', sans-serif;
            transition: border-color 0.3s, box-shadow 0.3s;
        }
        
        .form-control:focus {
            outline: none;
            border-color: var(--primary);
            box-shadow: 0 0 0 3px rgba(108, 99, 255, 0.2);
        }
        
        textarea.form-control {
            min-height: 100px;
            resize: vertical;
        }
        
        /* Card Image */
        .card-image {
            width: 100%;
            border-radius: 6px;
            margin-top: 10px;
            max-height: 200px;
            object-fit: cover;
        }
        
        /* Multiple Choice Options */
        .multiple-choice-options {
            margin-top: 15px;
        }
        
        .option-item {
            background-color: var(--input-bg);
            border-radius: 6px;
            padding: 10px 15px;
            margin-bottom: 8px;
            cursor: pointer;
            transition: all 0.2s;
            display: flex;
            align-items: center;
        }
        
        .option-item:hover {
            background-color: rgba(108, 99, 255, 0.1);
        }
        
        .option-item.correct {
            background-color: rgba(76, 175, 80, 0.2);
            border-left: 3px solid var(--success);
        }
        
        .option-item.incorrect {
            background-color: rgba(244, 67, 54, 0.2);
            border-left: 3px solid var(--error);
        }
        
        .option-prefix {
            font-weight: 600;
            color: var(--primary);
            margin-right: 10px;
            min-width: 20px;
        }
        
        .option-text {
            flex: 1;
        }
        
        .option-radio {
            margin-right: 10px;
            accent-color: var(--primary);
        }
        
        /* Responsive */
        @media (max-width: 768px) {
            .cards-grid {
                grid-template-columns: 1fr;
            }
            
            .action-buttons {
                flex-direction: column;
            }
            
            .btn {
                width: 100%;
                margin-bottom: 10px;
            }
        }
        
        /* Web Search Results */
        .web-search-results {
            margin-top: 30px;
            background-color: var(--card-bg);
            border-radius: 10px;
            padding: 20px;
            box-shadow: 0 4px 15px rgba(0, 0, 0, 0.1);
        }
        
        .search-results-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 15px;
        }
        
        .search-results-title {
            font-size: 1.5rem;
            color: var(--text-primary);
            display: flex;
            align-items: center;
            gap: 10px;
        }
        
        .search-results-list {
            list-style: none;
            padding: 0;
        }
        
        .search-result-item {
            padding: 15px;
            border-radius: 8px;
            background-color: var(--input-bg);
            margin-bottom: 10px;
            transition: transform 0.2s;
        }
        
        .search-result-item:hover {
            transform: translateY(-2px);
            box-shadow: 0 5px 15px rgba(0, 0, 0, 0.1);
        }
        
        .result-title {
            font-size: 1.1rem;
            font-weight: 600;
            margin-bottom: 5px;
            color: var(--primary);
        }
        
        .result-description {
            color: var(--text-secondary);
            margin-bottom: 10px;
            font-size: 0.9rem;
            line-height: 1.4;
        }
        
        .result-url {
            color: var(--secondary);
            font-size: 0.85rem;
            word-break: break-all;
        }
        
        .result-type {
            display: inline-block;
            padding: 3px 8px;
            border-radius: 4px;
            font-size: 0.75rem;
            margin-right: 8px;
            font-weight: 600;
        }
        
        .result-type.video {
            background-color: rgba(255, 87, 34, 0.2);
            color: var(--accent);
        }
        
        .result-type.article {
            background-color: rgba(76, 175, 80, 0.2);
            color: var(--success);
        }
        
        .result-type.course {
            background-color: rgba(108, 99, 255, 0.2);
            color: var(--primary);
        }
        
        .search-loading {
            text-align: center;
            padding: 30px;
            display: none;
        }
        
        .search-spinner {
            border: 4px solid rgba(0, 0, 0, 0.1);
            border-radius: 50%;
            border-top: 4px solid var(--primary);
            width: 40px;
            height: 40px;
            animation: spin 1s linear infinite;
            margin: 0 auto 15px;
        }
        
        @keyframes spin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }
    </style>
</head>
<body>
    <header>
        <div class="container">
            <nav class="navbar">
                <a href="/dashboard" class="logo">
                    <i class="fas fa-brain"></i> LEARNO
                </a>
                <ul class="nav-links">
                    <li><a href="/dashboard"><i class="fas fa-tachometer-alt"></i> Dashboard</a></li>
                    <li><a href="/upload"><i class="fas fa-upload"></i> Upload</a></li>
                    <li><a href="/logout"><i class="fas fa-sign-out-alt"></i> Logout</a></li>
                </ul>
            </nav>
        </div>
    </header>

    <main class="main-content">
        <div class="container">
            <div class="deck-header">
                <h1 class="deck-title"><%= deck.title %></h1>
                <p class="deck-description"><%= deck.description %></p>
                <div class="deck-meta">
                    <div><i class="fas fa-layer-group"></i> <%= deck.cards.length %> Cards</div>
                    <div><i class="far fa-calendar-alt"></i> Created: <%= new Date(deck.createdAt).toLocaleDateString() %></div>
                </div>
                <div class="action-buttons">
                    <a href="/deck/<%= deck._id %>/study" class="btn btn-primary">
                        <i class="fas fa-play"></i> Study Now
                    </a>
                    <a href="/export/<%= deck._id %>" class="btn btn-secondary">
                        <i class="fas fa-file-export"></i> Export Deck
                    </a>
                    <button id="search-web-btn" class="btn btn-secondary">
                        <i class="fas fa-search"></i> Search Web Resources
                    </button>
                </div>
            </div>

            <div id="web-search-results" class="web-search-results" style="display: none;">
                <div class="search-results-header">
                    <h2 class="search-results-title"><i class="fas fa-globe"></i> Web Resources</h2>
                </div>
                <div id="search-loading" class="search-loading">
                    <div class="search-spinner"></div>
                    <p>Searching the web for helpful resources...</p>
                </div>
                <ul id="search-results-list" class="search-results-list"></ul>
            </div>

            <div class="cards-section">
                <h2 class="section-title"><i class="fas fa-cards"></i> Flashcards</h2>
                <div class="cards-grid">
                    <% deck.cards.forEach((card, index) => { %>
                        <div class="card">
                            <div class="card-front">
                                <div class="card-label"><i class="fas fa-question-circle"></i> Front</div>
                                <div class="card-content"><%= card.front %></div>
                            </div>
                            <div class="card-divider"></div>
                            <div class="card-back">
                                <div class="card-label"><i class="fas fa-lightbulb"></i> Back</div>
                                <div class="card-content"><%= card.back %></div>
                            </div>
                            <% if (card.options && card.options.length > 0) { %>
                                <div class="card-divider"></div>
                                <div class="multiple-choice-options">
                                    <div class="card-label"><i class="fas fa-list-ul"></i> Multiple Choice</div>
                                    <% card.options.forEach((option, optionIndex) => { %>
                                        <div class="option-item <%= option.isCorrect ? 'correct' : '' %>">
                                            <span class="option-prefix"><%= String.fromCharCode(65 + optionIndex) %>.</span>
                                            <span class="option-text"><%= option.text %></span>
                                        </div>
                                    <% }); %>
                                </div>
                            <% } %>
                            <% if (card.imageUrl) { %>
                                <img src="<%= card.imageUrl %>" alt="Card illustration" class="card-image">
                            <% } %>
                            <div class="card-actions">
                                <button class="card-btn improve-card" data-index="<%= index %>">
                                    <i class="fas fa-magic"></i> Improve
                                </button>
                                <button class="card-btn generate-image" data-index="<%= index %>">
                                    <i class="fas fa-image"></i> Generate Image
                                </button>
                                <button class="card-btn generate-options" data-index="<%= index %>">
                                    <i class="fas fa-list-ol"></i> Generate Options
                                </button>
                            </div>
                        </div>
                    <% }); %>
                </div>
            </div>

            <div class="add-card-section">
                <h2 class="section-title"><i class="fas fa-plus-circle"></i> Add New Card</h2>
                <form action="/deck/<%= deck._id %>/card" method="POST">
                    <div class="form-group">
                        <label for="front" class="form-label">Front (Question/Concept)</label>
                        <textarea id="front" name="front" class="form-control" required></textarea>
                    </div>
                    <div class="form-group">
                        <label for="back" class="form-label">Back (Answer/Explanation)</label>
                        <textarea id="back" name="back" class="form-control" required></textarea>
                    </div>
                    <div class="form-group">
                        <label for="tags" class="form-label">Tags (comma separated)</label>
                        <input type="text" id="tags" name="tags" class="form-control" placeholder="e.g. physics, energy, important">
                    </div>
                    <div class="form-group">
                        <label class="form-label">Multiple Choice Options (Optional)</label>
                        <div id="options-container">
                            <div class="option-row" style="display: flex; gap: 10px; margin-bottom: 10px;">
                                <input type="text" name="options[0][text]" class="form-control" placeholder="Option A" style="flex: 1;">
                                <div style="display: flex; align-items: center;">
                                    <input type="radio" name="correctOption" value="0" id="correct0" class="option-radio">
                                    <label for="correct0">Correct</label>
                                </div>
                            </div>
                            <div class="option-row" style="display: flex; gap: 10px; margin-bottom: 10px;">
                                <input type="text" name="options[1][text]" class="form-control" placeholder="Option B" style="flex: 1;">
                                <div style="display: flex; align-items: center;">
                                    <input type="radio" name="correctOption" value="1" id="correct1" class="option-radio">
                                    <label for="correct1">Correct</label>
                                </div>
                            </div>
                        </div>
                        <button type="button" id="add-option" class="btn btn-secondary" style="margin-top: 10px;">
                            <i class="fas fa-plus"></i> Add Option
                        </button>
                    </div>
                    <button type="submit" class="btn btn-success">
                        <i class="fas fa-plus"></i> Add Card
                    </button>
                </form>
            </div>
        </div>
    </main>

    <script>
        document.addEventListener('DOMContentLoaded', function() {
            // Improve card functionality
            const improveButtons = document.querySelectorAll('.improve-card');
            improveButtons.forEach(button => {
                button.addEventListener('click', function() {
                    const cardIndex = this.getAttribute('data-index');
                    const card = this.closest('.card');
                    
                    // Show loading state
                    this.innerHTML = '<i class="fas fa-spinner fa-spin"></i> Improving...';
                    this.disabled = true;
                    
                    fetch(`/api/improve-card/<%= deck._id %>/${cardIndex}`)
                        .then(response => response.json())
                        .then(data => {
                            if (data.success) {
                                // Update card content
                                card.querySelector('.card-front .card-content').textContent = data.card.front;
                                card.querySelector('.card-back .card-content').textContent = data.card.back;
                                
                                // Reset button
                                this.innerHTML = '<i class="fas fa-magic"></i> Improve';
                                this.disabled = false;
                            } else {
                                throw new Error(data.error);
                            }
                        })
                        .catch(error => {
                            console.error('Error:', error);
                            this.innerHTML = '<i class="fas fa-exclamation-circle"></i> Failed';
                            setTimeout(() => {
                                this.innerHTML = '<i class="fas fa-magic"></i> Improve';
                                this.disabled = false;
                            }, 3000);
                        });
                });
            });
            
            // Generate image functionality
            const imageButtons = document.querySelectorAll('.generate-image');
            imageButtons.forEach(button => {
                button.addEventListener('click', function() {
                    const cardIndex = this.getAttribute('data-index');
                    const card = this.closest('.card');
                    
                    // Show loading state
                    this.innerHTML = '<i class="fas fa-spinner fa-spin"></i> Generating...';
                    this.disabled = true;
                    
                    fetch(`/api/generate-image/<%= deck._id %>/${cardIndex}`)
                        .then(response => response.json())
                        .then(data => {
                            if (data.success) {
                                // Check if image already exists
                                let img = card.querySelector('.card-image');
                                if (!img) {
                                    // Create new image element
                                    img = document.createElement('img');
                                    img.className = 'card-image';
                                    card.insertBefore(img, card.querySelector('.card-actions'));
                                }
                                
                                // Update image source
                                img.src = data.imageUrl;
                                img.alt = 'Card illustration';
                                
                                // Reset button
                                this.innerHTML = '<i class="fas fa-image"></i> Generate Image';
                                this.disabled = false;
                            } else {
                                throw new Error(data.error);
                            }
                        })
                        .catch(error => {
                            console.error('Error:', error);
                            this.innerHTML = '<i class="fas fa-exclamation-circle"></i> Failed';
                            setTimeout(() => {
                                this.innerHTML = '<i class="fas fa-image"></i> Generate Image';
                                this.disabled = false;
                            }, 3000);
                        });
                });
            });
            
            // Generate multiple choice options functionality
            const optionsButtons = document.querySelectorAll('.generate-options');
            optionsButtons.forEach(button => {
                button.addEventListener('click', function() {
                    const cardIndex = this.getAttribute('data-index');
                    const card = this.closest('.card');
                    
                    // Show loading state
                    this.innerHTML = '<i class="fas fa-spinner fa-spin"></i> Generating...';
                    this.disabled = true;
                    
                    fetch(`/api/generate-options/<%= deck._id %>/${cardIndex}`)
                        .then(response => response.json())
                        .then(data => {
                            if (data.success) {
                                // Check if options container already exists
                                let optionsContainer = card.querySelector('.multiple-choice-options');
                                if (!optionsContainer) {
                                    // Create divider and options container
                                    const divider = document.createElement('div');
                                    divider.className = 'card-divider';
                                    
                                    optionsContainer = document.createElement('div');
                                    optionsContainer.className = 'multiple-choice-options';
                                    
                                    const label = document.createElement('div');
                                    label.className = 'card-label';
                                    label.innerHTML = '<i class="fas fa-list-ul"></i> Multiple Choice';
                                    
                                    optionsContainer.appendChild(label);
                                    
                                    // Insert before card actions or image if it exists
                                    const insertBefore = card.querySelector('.card-image') || card.querySelector('.card-actions');
                                    card.insertBefore(divider, insertBefore);
                                    card.insertBefore(optionsContainer, insertBefore);
                                } else {
                                    // Clear existing options
                                    const label = optionsContainer.querySelector('.card-label');
                                    optionsContainer.innerHTML = '';
                                    optionsContainer.appendChild(label);
                                }
                                
                                // Add new options
                                data.options.forEach((option, index) => {
                                    const optionItem = document.createElement('div');
                                    optionItem.className = `option-item ${option.isCorrect ? 'correct' : ''}`;
                                    
                                    const prefix = document.createElement('span');
                                    prefix.className = 'option-prefix';
                                    prefix.textContent = `${String.fromCharCode(65 + index)}.`;
                                    
                                    const text = document.createElement('span');
                                    text.className = 'option-text';
                                    text.textContent = option.text;
                                    
                                    optionItem.appendChild(prefix);
                                    optionItem.appendChild(text);
                                    optionsContainer.appendChild(optionItem);
                                });
                                
                                // Reset button
                                this.innerHTML = '<i class="fas fa-list-ol"></i> Generate Options';
                                this.disabled = false;
                            } else {
                                throw new Error(data.error);
                            }
                        })
                        .catch(error => {
                            console.error('Error:', error);
                            this.innerHTML = '<i class="fas fa-exclamation-circle"></i> Failed';
                            setTimeout(() => {
                                this.innerHTML = '<i class="fas fa-list-ol"></i> Generate Options';
                                this.disabled = false;
                            }, 3000);
                        });
                });
            });
            
            // Add option button functionality
            const addOptionBtn = document.getElementById('add-option');
            if (addOptionBtn) {
                addOptionBtn.addEventListener('click', function() {
                    const optionsContainer = document.getElementById('options-container');
                    const optionCount = optionsContainer.children.length;
                    
                    if (optionCount < 6) { // Limit to 6 options
                        const optionLetter = String.fromCharCode(65 + optionCount);
                        
                        const optionRow = document.createElement('div');
                        optionRow.className = 'option-row';
                        optionRow.style = 'display: flex; gap: 10px; margin-bottom: 10px;';
                        
                        optionRow.innerHTML = `
                            <input type="text" name="options[${optionCount}][text]" class="form-control" placeholder="Option ${optionLetter}" style="flex: 1;">
                            <div style="display: flex; align-items: center;">
                                <input type="radio" name="correctOption" value="${optionCount}" id="correct${optionCount}" class="option-radio">
                                <label for="correct${optionCount}">Correct</label>
                            </div>
                        `;
                        
                        optionsContainer.appendChild(optionRow);
                    }
                    
                    if (optionCount + 1 >= 6) {
                        addOptionBtn.disabled = true;
                    }
                });
            }
            
            // Web search functionality
            const searchWebBtn = document.getElementById('search-web-btn');
            const webSearchResults = document.getElementById('web-search-results');
            const searchLoading = document.getElementById('search-loading');
            const searchResultsList = document.getElementById('search-results-list');
            
            if (searchWebBtn) {
                searchWebBtn.addEventListener('click', function() {
                    // Show results container and loading spinner
                    webSearchResults.style.display = 'block';
                    searchLoading.style.display = 'block';
                    searchResultsList.innerHTML = '';
                    
                    // Disable button while loading
                    this.disabled = true;
                    this.innerHTML = '<i class="fas fa-spinner fa-spin"></i> Searching...';
                    
                    // Collect deck content for search
                    const deckTitle = '<%= deck.title %>';
                    const deckDescription = '<%= deck.description %>';
                    let cardContent = [];
                    
                    <% for(let i = 0; i < deck.cards.length; i++) { %>
                        cardContent.push({
                            front: "<%= deck.cards[i].front.replace(/\"/g, '\\\"') %>",
                            back: "<%= deck.cards[i].back.replace(/\"/g, '\\\"') %>"
                        });
                    <% } %>
                    
                    // Make API request to search the web
                    fetch('/api/search-web-resources', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json'
                        },
                        body: JSON.stringify({
                            deckId: '<%= deck._id %>',
                            title: deckTitle,
                            description: deckDescription,
                            cards: cardContent
                        })
                    })
                    .then(response => {
                        if (!response.ok) {
                            throw new Error('Network response was not ok');
                        }
                        return response.json();
                    })
                    .then(data => {
                        // Hide loading spinner
                        searchLoading.style.display = 'none';
                        
                        if (data.success && data.resources && data.resources.length > 0) {
                            // Render search results
                            data.resources.forEach(resource => {
                                const li = document.createElement('li');
                                li.className = 'search-result-item';
                                
                                // Determine resource type
                                let typeClass = 'article';
                                let typeLabel = 'Article';
                                
                                if (resource.url.includes('youtube.com') || resource.url.includes('youtu.be')) {
                                    typeClass = 'video';
                                    typeLabel = 'Video';
                                } else if (resource.url.includes('course') || resource.url.includes('class') || resource.url.includes('learn')) {
                                    typeClass = 'course';
                                    typeLabel = 'Course';
                                }
                                
                                li.innerHTML = `
                                    <span class="result-type ${typeClass}">${typeLabel}</span>
                                    <a href="${resource.url}" target="_blank" class="result-title">${resource.title}</a>
                                    <p class="result-description">${resource.description}</p>
                                    <div class="result-url">${resource.url}</div>
                                `;
                                
                                searchResultsList.appendChild(li);
                            });
                        } else {
                            // Show no results message
                            searchResultsList.innerHTML = `
                                <li class="search-result-item" style="text-align: center;">
                                    <i class="fas fa-info-circle" style="font-size: 2rem; color: var(--primary); margin-bottom: 10px;"></i>
                                    <p>No relevant resources found. Try modifying your deck content to be more specific.</p>
                                </li>
                            `;
                        }
                        
                        // Reset button
                        this.disabled = false;
                        this.innerHTML = '<i class="fas fa-search"></i> Search Web Resources';
                    })
                    .catch(error => {
                        console.error('Error searching web:', error);
                        searchLoading.style.display = 'none';
                        
                        // Show error message
                        searchResultsList.innerHTML = `
                            <li class="search-result-item" style="text-align: center;">
                                <i class="fas fa-exclamation-triangle" style="font-size: 2rem; color: var(--error); margin-bottom: 10px;"></i>
                                <p>An error occurred while searching for resources. Please try again later.</p>
                            </li>
                        `;
                        
                        // Reset button
                        this.disabled = false;
                        this.innerHTML = '<i class="fas fa-search"></i> Search Web Resources';
                    });
                });
            }
        });
    </script>
</body>
</html>
